[{"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\index.js":"1","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\App.js":"2","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\reportWebVitals.js":"3","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\login.jsx":"4","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\Navibar.tsx":"5","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Pages\\cardShow.tsx":"6","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Pages\\mainPage.tsx":"7","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\InsteadOfDatabase\\mainCard.tsx":"8","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\search.tsx":"9","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\InsteadOfDatabase\\ActiveCard.tsx":"10","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Pages\\OpenCard.tsx":"11","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OpenCard\\CardComments.tsx":"12","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Pages\\TestForUser.jsx":"13","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTests\\CreateUserTest.jsx":"14","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTests\\ShowErrorsOnScreen.jsx":"15","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Experimental\\ExpMain.tsx":"16","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Experimental\\TakeTheTest.tsx":"17","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\Login.tsx":"18","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\UnLogin.tsx":"19"},{"size":1389,"mtime":1615571164468,"results":"20","hashOfConfig":"21"},{"size":3354,"mtime":1615723590807,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":514,"mtime":1611164381056,"results":"24","hashOfConfig":"25"},{"size":2701,"mtime":1615723611541,"results":"26","hashOfConfig":"21"},{"size":1004,"mtime":1613219371705,"results":"27","hashOfConfig":"21"},{"size":509,"mtime":1611925097428,"results":"28","hashOfConfig":"21"},{"size":2257,"mtime":1612171487301,"results":"29","hashOfConfig":"21"},{"size":7520,"mtime":1611926394996,"results":"30","hashOfConfig":"21"},{"size":1883,"mtime":1612176727105,"results":"31","hashOfConfig":"21"},{"size":2942,"mtime":1613635252695,"results":"32","hashOfConfig":"21"},{"size":2449,"mtime":1612373126803,"results":"33","hashOfConfig":"21"},{"size":8744,"mtime":1614195516120,"results":"34","hashOfConfig":"21"},{"size":22629,"mtime":1614026285274,"results":"35","hashOfConfig":"21"},{"size":5414,"mtime":1615122806127,"results":"36","hashOfConfig":"21"},{"size":2574,"mtime":1615484284733,"results":"37","hashOfConfig":"21"},{"size":6719,"mtime":1615466521245,"results":"38","hashOfConfig":"21"},{"size":3288,"mtime":1615720908444,"results":"39","hashOfConfig":"21"},{"size":512,"mtime":1615723525131,"results":"40","hashOfConfig":"21"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},"w9rtnm",{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1jkcb9c",{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\index.js",["94"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { onError } from 'apollo-link-error'\n\nimport { ApolloClient, InMemoryCache, gql, ApolloProvider, HttpLink, ApolloLink } from '@apollo/client';\nimport {setContext} from \"@apollo/client/link/context\";\n\nconst authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    const token = localStorage.getItem('token');\n    // return the headers to the context so httpLink can read them\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `JWT ${token}` : \"\",\n        }\n    }\n});\nconst httpLink = new HttpLink({\n    uri: 'https://iot-experemental.herokuapp.com/graphql/'\n    // Additional options\n});\nconst errorLink = onError(({ graphQLErrors }) => {\n    if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message))\n})\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, httpLink]),\n    // uri: 'https://iot-experemental.herokuapp.com/graphql/',\n    cache: new InMemoryCache()\n});\n\n\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>\n    </ApolloProvider>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n",[],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\App.js",["95","96","97","98"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\reportWebVitals.js",["99","100"],"const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\login.jsx",[],["101","102"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\Navibar.tsx",["103","104","105","106"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Pages\\cardShow.tsx",["107"],"import * as React from 'react';\r\nimport {requestCardContent, CardPresentView} from '../InsteadOfDatabase/mainCard';\r\nimport {Button, Card} from \"react-bootstrap\";\r\n\r\n\r\nexport {CardShow}\r\n\r\nclass CardShow extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                {requestCardContent.map((card: CardPresentView, cardIndex:number) =>\r\n                    <Card style={{width: '18rem'}} className=\"mr-2  mt-3\" key={cardIndex}>\r\n                        <Card.Img variant=\"top\" src={card.cardImgUrl}/>\r\n                        <Card.Body>\r\n                            <Card.Title>{card.cardTitle}</Card.Title>\r\n                            <Card.Text>\r\n                                {card.cardText}\r\n                            </Card.Text>\r\n                            <Button variant=\"primary\" href={card.cardHref}>{card.cardButtonText}</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n",[],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Pages\\mainPage.tsx",["108"],"import * as React from 'react'\r\nimport {Row} from \"react-bootstrap\";\r\nimport {CardShow} from  './cardShow';\r\n\r\n\r\nclass MainPage extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"text-center display-4 mt-2 \">Последние просмоторенные карточки</div>\r\n                <Row className=\"justify-content-center\">\r\n                    <CardShow/>\r\n                </Row>\r\n            </div>\r\n        )}}\r\n\r\n\r\nexport {MainPage}\r\n","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\InsteadOfDatabase\\mainCard.tsx",[],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\search.tsx",["109"],"import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\n\r\nconst filter = createFilterOptions<FilmOptionType>();\r\n\r\nexport default function NavSearch() {\r\n    const [value, setValue] = React.useState<FilmOptionType | null>(null);\r\n\r\n    return (\r\n        <Autocomplete\r\n            size=\"small\"\r\n            value={value}\r\n            onChange={(event, newValue) => {\r\n                if (typeof newValue === 'string') {\r\n                    setValue({\r\n                        title: newValue,\r\n                    });\r\n                } else if (newValue && newValue.inputValue) {\r\n                    // Create a new value from the user input\r\n                    setValue({\r\n                        title: newValue.inputValue,\r\n                    });\r\n                } else {\r\n                    setValue(newValue);\r\n                }\r\n            }}\r\n            filterOptions={(options, params) => {\r\n                const filtered = filter(options, params);\r\n\r\n                // Suggest the creation of a new value\r\n                // if (params.inputValue !== '') {\r\n                //     filtered.push({\r\n                //         inputValue: params.inputValue,\r\n                //         title: `Add \"${params.inputValue}\"`,\r\n                //     });\r\n                // }\r\n\r\n                return filtered;\r\n            }}\r\n            selectOnFocus\r\n            clearOnBlur\r\n            handleHomeEndKeys\r\n            id=\"free-solo-with-text-demo\"\r\n            options={top100Films}\r\n            getOptionLabel={(option) => {\r\n                // Value selected with enter, right from the input\r\n                if (typeof option === 'string') {\r\n                    return option;\r\n                }\r\n                // Add \"xxx\" option created dynamically\r\n                if (option.inputValue) {\r\n                    return option.inputValue;\r\n                }\r\n                // Regular option\r\n                return option.title;\r\n            }}\r\n            renderOption={(option) => option.title}\r\n            \r\n            freeSolo\r\n            renderInput={(params) => (\r\n                <TextField {...params} label=\"Введите название карточки или темы\" variant=\"outlined\" />\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\ninterface FilmOptionType {\r\n    inputValue?: string;\r\n    title: string;\r\n    year?: number;\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films: FilmOptionType[] = [\r\n    { title: 'The Shawshank Redemption', year: 1994 },\r\n    { title: 'The Godfather', year: 1972 },\r\n    { title: 'The Godfather: Part II', year: 1974 },\r\n    { title: 'The Dark Knight', year: 2008 },\r\n    { title: '12 Angry Men', year: 1957 },\r\n    { title: \"Schindler's List\", year: 1993 },\r\n    { title: 'Pulp Fiction', year: 1994 },\r\n    { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n    { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n    { title: 'Fight Club', year: 1999 },\r\n    { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n    { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n    { title: 'Forrest Gump', year: 1994 },\r\n    { title: 'Inception', year: 2010 },\r\n    { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n    { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n    { title: 'Goodfellas', year: 1990 },\r\n    { title: 'The Matrix', year: 1999 },\r\n    { title: 'Seven Samurai', year: 1954 },\r\n    { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n    { title: 'City of God', year: 2002 },\r\n    { title: 'Se7en', year: 1995 },\r\n    { title: 'The Silence of the Lambs', year: 1991 },\r\n    { title: \"It's a Wonderful Life\", year: 1946 },\r\n    { title: 'Life Is Beautiful', year: 1997 },\r\n    { title: 'The Usual Suspects', year: 1995 },\r\n    { title: 'Léon: The Professional', year: 1994 },\r\n    { title: 'Spirited Away', year: 2001 },\r\n    { title: 'Saving Private Ryan', year: 1998 },\r\n    { title: 'Once Upon a Time in the West', year: 1968 },\r\n    { title: 'American History X', year: 1998 },\r\n    { title: 'Interstellar', year: 2014 },\r\n    { title: 'Casablanca', year: 1942 },\r\n    { title: 'City Lights', year: 1931 },\r\n    { title: 'Psycho', year: 1960 },\r\n    { title: 'The Green Mile', year: 1999 },\r\n    { title: 'The Intouchables', year: 2011 },\r\n    { title: 'Modern Times', year: 1936 },\r\n    { title: 'Raiders of the Lost Ark', year: 1981 },\r\n    { title: 'Rear Window', year: 1954 },\r\n    { title: 'The Pianist', year: 2002 },\r\n    { title: 'The Departed', year: 2006 },\r\n    { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n    { title: 'Back to the Future', year: 1985 },\r\n    { title: 'Whiplash', year: 2014 },\r\n    { title: 'Gladiator', year: 2000 },\r\n    { title: 'Memento', year: 2000 },\r\n    { title: 'The Prestige', year: 2006 },\r\n    { title: 'The Lion King', year: 1994 },\r\n    { title: 'Apocalypse Now', year: 1979 },\r\n    { title: 'Alien', year: 1979 },\r\n    { title: 'Sunset Boulevard', year: 1950 },\r\n    {\r\n        title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n        year: 1964,\r\n    },\r\n    { title: 'The Great Dictator', year: 1940 },\r\n    { title: 'Cinema Paradiso', year: 1988 },\r\n    { title: 'The Lives of Others', year: 2006 },\r\n    { title: 'Grave of the Fireflies', year: 1988 },\r\n    { title: 'Paths of Glory', year: 1957 },\r\n    { title: 'Django Unchained', year: 2012 },\r\n    { title: 'The Shining', year: 1980 },\r\n    { title: 'WALL·E', year: 2008 },\r\n    { title: 'American Beauty', year: 1999 },\r\n    { title: 'The Dark Knight Rises', year: 2012 },\r\n    { title: 'Princess Mononoke', year: 1997 },\r\n    { title: 'Aliens', year: 1986 },\r\n    { title: 'Oldboy', year: 2003 },\r\n    { title: 'Once Upon a Time in America', year: 1984 },\r\n    { title: 'Witness for the Prosecution', year: 1957 },\r\n    { title: 'Das Boot', year: 1981 },\r\n    { title: 'Citizen Kane', year: 1941 },\r\n    { title: 'North by Northwest', year: 1959 },\r\n    { title: 'Vertigo', year: 1958 },\r\n    { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n    { title: 'Reservoir Dogs', year: 1992 },\r\n    { title: 'Braveheart', year: 1995 },\r\n    { title: 'M', year: 1931 },\r\n    { title: 'Requiem for a Dream', year: 2000 },\r\n    { title: 'Amélie', year: 2001 },\r\n    { title: 'A Clockwork Orange', year: 1971 },\r\n    { title: 'Like Stars on Earth', year: 2007 },\r\n    { title: 'Taxi Driver', year: 1976 },\r\n    { title: 'Lawrence of Arabia', year: 1962 },\r\n    { title: 'Double Indemnity', year: 1944 },\r\n    { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n    { title: 'Amadeus', year: 1984 },\r\n    { title: 'To Kill a Mockingbird', year: 1962 },\r\n    { title: 'Toy Story 3', year: 2010 },\r\n    { title: 'Logan', year: 2017 },\r\n    { title: 'Full Metal Jacket', year: 1987 },\r\n    { title: 'Dangal', year: 2016 },\r\n    { title: 'The Sting', year: 1973 },\r\n    { title: '2001: A Space Odyssey', year: 1968 },\r\n    { title: \"Singin' in the Rain\", year: 1952 },\r\n    { title: 'Toy Story', year: 1995 },\r\n    { title: 'Bicycle Thieves', year: 1948 },\r\n    { title: 'The Kid', year: 1921 },\r\n    { title: 'Inglourious Basterds', year: 2009 },\r\n    { title: 'Snatch', year: 2000 },\r\n    { title: '3 Idiots', year: 2009 },\r\n    { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\InsteadOfDatabase\\ActiveCard.tsx",[],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Pages\\OpenCard.tsx",["110","111"],"import ReactPlayer from \"react-player\";\r\nimport * as React from 'react'\r\nimport {Comment} from '../Components/OpenCard/CardComments'\r\nimport {ActiveCard} from '../InsteadOfDatabase/ActiveCard'\r\n// import {  Typography, Breadcrumb, Rate  } from 'antd';\r\n// import {LeftOutlined, RightOutlined, DownOutlined, UpOutlined} from '@ant-design/icons';\r\n// import 'antd/dist/antd.css';\r\n\r\nimport {Alert, Pagination, Row, Col} from \"react-bootstrap\";\r\n// const { Title } = Typography;\r\n\r\n\r\n\r\nclass OpenCard extends React.Component{\r\n    render(){\r\n        return(\r\n            <>\r\n                <Row className=\"ml-2 mt-4 \" >\r\n                    <Col className=\"col-12 col-md-8\">\r\n                        <Row>\r\n                            <div className=\"display-4 text-left mr-sm-2\">{ActiveCard.CardTitle}</div>\r\n                            {/*<Title level={4} className=\"ml-2\">{ActiveCard.CardID}</Title>*/}\r\n                        </Row>\r\n                        {/*<Breadcrumb>*/}\r\n                        {/*    <Breadcrumb.Item>{ActiveCard.Section}</Breadcrumb.Item>*/}\r\n                        {/*    <Breadcrumb.Item><a href=\"\">{ActiveCard.Theme}</a></Breadcrumb.Item>*/}\r\n                        {/*    <Breadcrumb.Item><a href=\"\">{ActiveCard.SubTheme}</a></Breadcrumb.Item>*/}\r\n                        {/*    <Breadcrumb.Item>{ActiveCard.SubSubTheme}</Breadcrumb.Item>*/}\r\n                        {/*    <Breadcrumb.Item>{ActiveCard.CardLevel}</Breadcrumb.Item>*/}\r\n                        {/*</Breadcrumb>*/}\r\n                    </Col>\r\n                    <Col   className=\"mt-3 col-10 col-md-3\">\r\n                        {/*<Pagination size=\"lg\">*/}\r\n                        {/*    <Pagination.Item><LeftOutlined/></Pagination.Item>*/}\r\n                        {/*    <Pagination.Item className=\"secondary\"><UpOutlined/></Pagination.Item>*/}\r\n                        {/*    <Pagination.Item className=\"secondary\"><DownOutlined/></Pagination.Item>*/}\r\n                        {/*    <Pagination.Item><RightOutlined/></Pagination.Item>*/}\r\n                        {/*</Pagination>*/}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mt-4\">\r\n                    <Col className=\"col-12 col-lg-5 ml-2 mt-4\">\r\n                        <ReactPlayer width=\"auto\"  controls\r\n                                     url={ActiveCard.VideoURL}\r\n                        />\r\n                    </Col>\r\n                    <Col className=\"col-12 col-lg-6\">\r\n                        <Alert className=\"blockquote\" variant=\"light\" >{ActiveCard.CardText}</Alert>\r\n\r\n                        <Alert className=\"blockquote\">На сколько эта карточка была полезна?</Alert>\r\n                        {/*<Rate allowHalf defaultValue={4} className=\"ml-3\" />*/}\r\n                    </Col>\r\n                </Row>\r\n                <Comment/>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport {OpenCard}\r\n","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OpenCard\\CardComments.tsx",["112"],"import React from \"react\";\r\nimport {Avatar, Grid, Paper, TextField} from \"@material-ui/core\";\r\nimport {Button, Row, Col} from \"react-bootstrap\";\r\n\r\n\r\nconst imgLink =\r\n    \"https://images.pexels.com/photos/1681010/pexels-photo-1681010.jpeg?auto=compress&cs=tinysrgb&dpr=3&h=750&w=1260\";\r\n\r\nclass Comment extends React.Component{\r\n    render(){\r\n        return(\r\n            <div style={{ padding: 14 }}>\r\n                <h1>Комментарии</h1>\r\n                <Row>\r\n                    <Col className=\"col-11 ml-2 justify-content-center\" >\r\n                        <TextField  variant=\"outlined\" size=\"medium\" fullWidth multiline rows={3}/>\r\n                        <Button variant='outline-primary' className=\"mt-1\">Оставить комментарий</Button>\r\n\r\n                        <Paper style={{ padding: \"20px 20px\", marginTop: 10 }}>\r\n                            <Grid container wrap=\"nowrap\" spacing={2}>\r\n                                <Grid item>\r\n                                     <Avatar alt=\"Remy Sharp\" src={imgLink} />\r\n                            </Grid>\r\n                             <Grid >\r\n                                 <h4 style={{ margin: 0, textAlign: \"left\" }}>Michel Michel</h4>\r\n                                 <p style={{ textAlign: \"left\" }}>\r\n                                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean\r\n                                        luctus ut est sed faucibus. Duis bibendum ac ex vehicula laoreet.\r\n                                        Suspendisse congue vulputate lobortis. Pellentesque at interdum\r\n                                        tortor. Quisque arcu quam, malesuada vel mauris et, posuere\r\n                                        sagittis ipsum. Aliquam ultricies a ligula nec faucibus. In elit\r\n                                        metus, efficitur lobortis nisi quis, molestie porttitor metus.\r\n                                        Pellentesque et neque risus. Aliquam vulputate, mauris vitae\r\n                                        tincidunt interdum, mauris mi vehicula urna, nec feugiat quam\r\n                                        lectus vitae ex.{\" \"}\r\n                                 </p>\r\n\r\n                             </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport {Comment}\r\n","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Pages\\TestForUser.jsx",["113","114","115","116","117","118","119","120","121","122"],"import React from \"react\";\r\n// import {Steps} from \"antd\";\r\nimport {Container, Spinner, Button, Form, Row, Accordion, Card} from \"react-bootstrap\";\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { ThemeProvider, createMuiTheme, makeStyles, } from '@material-ui/core/styles';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport {ShowErrorsOnScreen} from \"../Components/UserTests/ShowErrorsOnScreen\";\r\nimport ReactPlayer from \"react-player\";\r\n\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: blue,\r\n        secondary: blue,\r\n    },\r\n});\r\n\r\n// const { Step } = Steps;\r\nexport class TestForUser extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.goToNextQuestion = this.goToNextQuestion.bind(this);\r\n        this.goToPreviousQuestion = this.goToPreviousQuestion.bind(this);\r\n        this.getRows = this.getRows.bind(this);\r\n        this.selectDeselectRow = this.selectDeselectRow.bind(this);\r\n        this.checkUserErrors = this.checkUserErrors.bind(this);\r\n        this.state = {\r\n            items: [],\r\n            isLoaded: false,\r\n            columns : [\r\n                { field: 'answerText', headerName: 'Ответы на вопрос', width: 2500 },\r\n            ],\r\n            rows: [\r\n                {id: 1,answerText: ''},\r\n            ],\r\n            activeQuestion: 0,\r\n            selectedRows: [],\r\n            errorArray: [],\r\n            oneTimeErrorCheck: false,\r\n            HelpLevel: '0',\r\n            showHelpVideo: true,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://iot-show-version.herokuapp.com/api/test/randq/25')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    userTest: json[0],\r\n                    isLoaded: true,\r\n                })\r\n            })\r\n            .then(this.getRows)\r\n            .catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    async goToNextQuestion(){\r\n        if (this.state.activeQuestion < this.state.userTest.questions.length - 1){\r\n            await this.setState({activeQuestion: this.state.activeQuestion + 1})\r\n        }\r\n\r\n        this.getRows()\r\n    }\r\n    async goToPreviousQuestion(){\r\n        if (this.state.activeQuestion > 0){\r\n            await this.setState({activeQuestion: this.state.activeQuestion - 1})\r\n        }\r\n        this.getRows()\r\n    }\r\n    getRows(){\r\n        let rows = []\r\n        this.state.userTest.questions[this.state.activeQuestion].answers.forEach( (answers, answersIndex) =>{\r\n            rows.push({id: answersIndex, answerText: answers.answerText})\r\n        })\r\n        this.setState({rows: rows})\r\n    }\r\n\r\n    async checkUserErrors(){\r\n        let userErrors= []\r\n        let minErrorQuery = 10000\r\n        this.state.userTest.questions[this.state.activeQuestion].answers.forEach( (answer, answersIndex) =>{\r\n            if(answer.isTrue === (this.state.selectedRows.indexOf(answersIndex) === -1)){\r\n                // console.log(answersIndex)\r\n                // missing coast становится очередью проверки, чем меньше число, тем раньше будет произведена проверка\r\n                if (answer.missingCoast < minErrorQuery){\r\n                    userErrors=[]\r\n                    userErrors.push(answersIndex)\r\n                    minErrorQuery = answer.missingCoast\r\n                }\r\n            }\r\n        })\r\n        this.setState({oneTimeErrorCheck: true})\r\n        console.log(userErrors)\r\n        this.setState({errorArray: userErrors})\r\n    }\r\n\r\n    async selectDeselectRow(RowSelectedParams){\r\n        // console.log(RowSelectedParams)\r\n        if(RowSelectedParams.isSelected && this.state.selectedRows.indexOf(RowSelectedParams.data.id) === -1){\r\n            let newRows = this.state.selectedRows\r\n            newRows.push(RowSelectedParams.data.id)\r\n            await this.setState({selectedRows: newRows})\r\n            // console.log(this.state.selectedRows)\r\n        }\r\n        if (!RowSelectedParams.isSelected){\r\n            let newRows = this.state.selectedRows\r\n            newRows.splice(this.state.selectedRows.indexOf(RowSelectedParams.data.id), 1)\r\n            await this.setState({selectedRows: newRows})\r\n            // console.log(this.state.selectedRows)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isLoaded } = this.state;\r\n        if (!isLoaded)\r\n            return <div className=\"display-1 text-center\">Loading...\r\n                <Spinner animation=\"grow\" variant=\"primary\" />\r\n            </div>\r\n        return(\r\n            <Container>\r\n                {/*<Steps size=\"small\" current={this.state.activeQuestion} className=\"mt-5\">*/}\r\n                {/*    {this.state.userTest.questions.map((question, questionIndex) =>*/}\r\n                {/*        <Step title=\"\" key={questionIndex}/>*/}\r\n                {/*    )}*/}\r\n                {/*</Steps>*/}\r\n\r\n                <div className=\"display-4\" style={{fontSize: '35px'}}>{this.state.userTest.questions[this.state.activeQuestion].questionTextV1}</div>\r\n                <Accordion  className=\"mt-4\">\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Отобразить видео вопрос\r\n                                {console.log(this.state.userTest.questions[this.state.activeQuestion].questionVideoUrl)}\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <ReactPlayer url={this.state.userTest.questions[this.state.activeQuestion].questionVideoUrl} controls autoPlay={true}/>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n                <ShowErrorsOnScreen errorArray={this.state.errorArray} answers={this.state.userTest.questions[this.state.activeQuestion].answers}\r\n                                    oneTimeErrorCheck={this.state.oneTimeErrorCheck} HelpLevel={this.state.HelpLevel}\r\n                                    showHelpVideo={this.state.showHelpVideo} className=\"mt-2\"/>\r\n                <div>\r\n                    <ThemeProvider theme={theme}>\r\n                        {this.state.getRows}\r\n                    <DataGrid rows={this.state.rows} columns={this.state.columns}  checkboxSelection autoHeight={true}\r\n                               disableColumnMenu={true} hideFooter={true} disableExtendRowFullWidth={false}\r\n                              showCellRightBorder={true} showToolbar={false} pageSize={10}\r\n                              onRowSelected={(RowSelectedParams) =>{this.selectDeselectRow(RowSelectedParams)}}\r\n                              disableColumnSelector={true} rowHeight={60}\r\n                   />\r\n                    </ThemeProvider>\r\n                </div>\r\n                {/*<Button onClick={this.goToPreviousQuestion}>Назад</Button>*/}\r\n                {/*<Button onClick={this.goToNextQuestion}>Вперед</Button>*/}\r\n                <Row className=\"mt-2 ml-1\">\r\n                <Button onClick={this.checkUserErrors} variant=\"outline-info\">Проверить ответы</Button>\r\n                <Form className=\"mr-3 ml-3\">\r\n                    {/*<Form.Label>Выбирите уровень пояснений к ответам</Form.Label>*/}\r\n                    <Form.Control as=\"select\"\r\n                                  value={this.state.HelpLevel}\r\n                                  onChange={e=>{\r\n                                      this.setState({HelpLevel: e.target.value})\r\n                                      console.log(e.target.value)\r\n                                  }}>\r\n                        <option value={0}>Легкий</option>\r\n                        <option value={1}>Средний</option>\r\n                        <option value={2}>Сложный</option>\r\n                    </Form.Control>\r\n                </Form>\r\n                    {/*<div className=\"display-4 mt-1\" style={{fontSize: '20px'}}>Отображать видео подсказку:</div>*/}\r\n                    {/*<Form.Check type=\"checkbox\" id=\"autoSizingCheck\" inline onChange={e =>*/}\r\n                    {/*{this.setState({showHelpVideo: e.target.checked})}}/>*/}\r\n                </Row>\r\n                {/*<div>{this.state.userTest.questions[this.state.activeQuestion].answers[this.state.errorArray[0]].helpTextLevelEasy}</div>*/}\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTests\\CreateUserTest.jsx",["123","124","125","126","127","128","129","130"],"import React from \"react\";\r\nimport {Button, Form, Jumbotron, Row, Spinner, Container} from \"react-bootstrap\";\r\n\r\n\r\nexport class CreateUserTest extends React.Component{\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.addQuestion = this.addQuestion.bind(this);\r\n        this.addAnswer = this.addAnswer.bind(this);\r\n        this.saveData = this.saveData.bind(this);\r\n        this.autoSaveData = this.autoSaveData.bind(this);\r\n        this.state = {\r\n            items: [],\r\n            isLoaded: false,\r\n            autoSave: false,\r\n        }\r\n\r\n        setInterval(this.autoSaveData, 10000)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://iot-show-version.herokuapp.com/api/test/25')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    userTest: json[0],\r\n                    isLoaded: true,\r\n                })\r\n            }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    saveData(){\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify(this.state.userTest)\r\n            }\r\n            fetch('https://iot-show-version.herokuapp.com/api/test/update', requestOptions)\r\n            console.log(\"Saved\")\r\n    }\r\n    autoSaveData(){\r\n        if (this.state.autoSave === 'true') {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify(this.state.userTest)\r\n            }\r\n            fetch('https://iot-show-version.herokuapp.com/api/test/update', requestOptions)\r\n            console.log(\"Saved\")\r\n            console.log(this.state.autoSave)\r\n        }\r\n    }\r\n\r\n    addQuestion(){\r\n        // console.log(this.state.userTest)\r\n        let data = this.state.userTest\r\n        // data = JSON.parse(data)\r\n        const question = {\r\n            questionName: '',\r\n            questionCoasting: 0,\r\n            averageMark: 0,\r\n            questionTextV1: '',\r\n            questionTextV2: '',\r\n            questionTextV3: '',\r\n            answers:[{\r\n                isTrue: true,\r\n                missingCoast: 0,\r\n                answerAward: 0,\r\n                answerText: '',\r\n                helpTextLevelEasy: '',\r\n                helpTextLevelMedium: '',\r\n                helpTextLevelHard: ''\r\n            }]\r\n\r\n        }\r\n        data.questions.push(question)\r\n        this.setState({userTest: data})\r\n    }\r\n    addAnswer(questionId) {\r\n        let data = this.state.userTest\r\n        // console.log(data)\r\n        const answer = {\r\n            isTrue: true,\r\n            missingCoast: 0,\r\n            answerAward: 0,\r\n            answerText: '',\r\n            helpTextLevelEasy: '',\r\n            helpTextLevelMedium: '',\r\n            helpTextLevelHard: ''\r\n        }\r\n        data.questions[questionId].answers.push(answer)\r\n        this.setState({userTest: data})\r\n    }\r\n\r\n    render() {\r\n        const { isLoaded } = this.state;\r\n\r\n        if (!isLoaded)\r\n            return <div className=\"display-1 text-center\">Loading...;\r\n                <Spinner animation=\"grow\" variant=\"primary\" />\r\n            </div>\r\n        // console.log(userTest)\r\n\r\n        return (\r\n            <>\r\n\r\n                <div className=\"display-4 text-center \">Создание теста</div>\r\n                <Container>\r\n                <Row className=\"justify-content-center\">\r\n                <div className=\"blockquote ml-5 mt-5 \">Название теста</div>\r\n                    <Form className=\"ml-2 col-7 mt-5\">\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Control type=\"text\" placeholder=\"Введите название теста\"\r\n                                          value={this.state.userTest.testName}\r\n                                          onChange={ e =>{\r\n                                              let data = this.state.userTest\r\n                                              data.testName = e.target.value\r\n                                              // console.log(data)\r\n                                              this.setState({userTest: data})\r\n                                          }\r\n                                          }/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Row>\r\n                <div className=\"display-4 ml-4\">Вопросы:</div>\r\n                {/*Ниже код, который должен быть вынесен в отдельный компонент, в будующем эта часть должна быть полностью переписана*/}\r\n\r\n                {/*<TestQuestions questionArray={userTest[0].questions}/>*/}\r\n                    <Form className=\"ml-4\">\r\n                        <Form.Label>Включить авто сохранение</Form.Label>\r\n                        <Form.Control as=\"select\" className=\"col-6 col-md-3\"\r\n                                      value={this.state.autoSave}\r\n                                      onChange={e=>{this.setState({autoSave: e.target.value})}}>\r\n                            <option value={true}>Включен</option>\r\n                            <option value={false}>Выключен</option>\r\n                        </Form.Control>\r\n                    </Form>\r\n                {this.state.userTest.questions.map((question, questionIndex) =>\r\n                    <div key={questionIndex} className=\"mr-4\">\r\n                        <h3 className=\"ml-4\">Вопрос №{questionIndex}</h3>\r\n                        <Form className=\"ml-4 mr-4\">\r\n                            <Form.Label>Вставьте ссылку на видео-вопрос</Form.Label>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Control type=\"text\" placeholder=\"Вставьте ссылку на видео-вопрос\"\r\n                                              value={this.state.userTest.questions[questionIndex].questionVideoUrl}\r\n                                              onChange={e=>{\r\n                                                  let data = this.state.userTest\r\n                                                  let question = data.questions[questionIndex]\r\n                                                  question.questionVideoUrl = e.target.value\r\n                                                  data.questions[questionIndex] = question\r\n                                                  // console.log(this.state.userTest)\r\n                                                  this.setState({userTest: data})\r\n                                              }}/>\r\n                            </Form.Group>\r\n                            <Form.Label>Первая формулировка вопроса</Form.Label>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Control type=\"text\" placeholder=\"Введите первую формулировку вопроса\"\r\n                                value={this.state.userTest.questions[questionIndex].questionTextV1}\r\n                                              as=\"textarea\" rows={3}\r\n                                onChange={e=>{\r\n                                    let data = this.state.userTest\r\n                                    let question = data.questions[questionIndex]\r\n                                    question.questionTextV1 = e.target.value\r\n                                    data.questions[questionIndex] = question\r\n                                    // console.log(this.state.userTest)\r\n                                    this.setState({userTest: data})\r\n                                }}/>\r\n                            </Form.Group>\r\n                            <Form.Label>Вторая формулировка вопроса</Form.Label>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Control type=\"text\" placeholder=\"Введите вторую формулировку вопроса\"\r\n                                              value={this.state.userTest.questions[questionIndex].questionTextV2}\r\n                                              as=\"textarea\" rows={3}\r\n                                              onChange={e=>{\r\n                                                  let data = this.state.userTest\r\n                                                  let question = data.questions[questionIndex]\r\n                                                  question.questionTextV2 = e.target.value\r\n                                                  data.questions[questionIndex] = question\r\n                                                  // console.log(this.state.userTest)\r\n                                                  this.setState({userTest: data})\r\n                                              }}/>\r\n                            </Form.Group>\r\n                            <Form.Label>Третья формулировка вопроса</Form.Label>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Control type=\"text\" placeholder=\"Введите третью формулировку вопроса\"\r\n                                              value={this.state.userTest.questions[questionIndex].questionTextV3}\r\n                                              as=\"textarea\" rows={3}\r\n                                              onChange={e=>{\r\n                                                  let data = this.state.userTest\r\n                                                  let question = data.questions[questionIndex]\r\n                                                  question.questionTextV3 = e.target.value\r\n                                                  data.questions[questionIndex] = question\r\n                                                  // console.log(this.state.userTest)\r\n                                                  this.setState({userTest: data})\r\n                                              }}/>\r\n                            </Form.Group>\r\n                        </Form>\r\n                        {/*<QuestionAnswers answerArray={question.answers}/>*/}\r\n\r\n                        {this.state.userTest.questions[questionIndex].answers.map((answer, answerIndex) =>\r\n                            <div key={answerIndex}>\r\n\r\n                                <Jumbotron className=\"col-11 justify-content-center ml-5\">\r\n                                    <h4 className=\"ml-4\">Ответ №{answerIndex}</h4>\r\n                                    <Form className=\"mr-5 ml-4\">\r\n\r\n                                        <Form.Label>Ответ правильный/ошибочный</Form.Label>\r\n                                        <Form.Control as=\"select\" className=\"col-6 col-md-3\"\r\n                                                      value={this.state.userTest.questions[questionIndex].answers[answerIndex].isTrue}\r\n                                                      onChange={e=>{\r\n                                                          let data = this.state.userTest\r\n                                                          let question = data.questions[questionIndex]\r\n                                                          let answer = question.answers[answerIndex]\r\n                                                          answer.isTrue = e.target.value\r\n                                                          question.answers[answerIndex] = answer\r\n                                                          data.questions[questionIndex] = question\r\n                                                          // console.log(this.state.userTest)\r\n                                                          this.setState({userTest: data})\r\n                                                      }}>\r\n                                            <option value={true}>Правильный</option>\r\n                                            <option value={false}>Ошибочный</option>\r\n                                        </Form.Control>\r\n\r\n                                        <Form.Label className=\"mt-2\">Очередь проверки, чем меньше - тем раньше вопрос будет проверен</Form.Label>\r\n                                        <Form.Group>\r\n                                            <Form.Control  type=\"number\" placeholder=\"Ведите число, отражающее очередь проверки\" className=\"col-6 col-md-3\"\r\n                                                           value={this.state.userTest.questions[questionIndex].answers[answerIndex].missingCoast}\r\n\r\n                                                           onChange={e=>{\r\n                                                               let data = this.state.userTest\r\n                                                               let question = data.questions[questionIndex]\r\n                                                               let answer = question.answers[answerIndex]\r\n                                                               answer.missingCoast = e.target.value\r\n                                                               question.answers[answerIndex] = answer\r\n                                                               data.questions[questionIndex] = question\r\n                                                               // console.log(this.state.userTest)\r\n                                                               this.setState({userTest: data})\r\n                                                           }}/>\r\n                                        </Form.Group>\r\n                                        <Form.Label>Ссылка на видео-подсказку к ответу</Form.Label>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control type=\"text\" placeholder=\"Введите ссылку на видео-подсказку к ответу\"\r\n                                                          value={this.state.userTest.questions[questionIndex].answers[answerIndex].answerVideoUrl}\r\n                                                          onChange={e=>{\r\n                                                              let data = this.state.userTest\r\n                                                              let question = data.questions[questionIndex]\r\n                                                              let answer = question.answers[answerIndex]\r\n                                                              answer.answerVideoUrl = e.target.value\r\n                                                              question.answers[answerIndex] = answer\r\n                                                              data.questions[questionIndex] = question\r\n                                                              // console.log(this.state.userTest)\r\n                                                              this.setState({userTest: data})\r\n                                                          }}/>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Label>Формулировка ответа</Form.Label>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control type=\"text\" placeholder=\"Введите формулировку ответа\"\r\n                                                          value={this.state.userTest.questions[questionIndex].answers[answerIndex].answerText}\r\n                                                          as=\"textarea\" rows={3}\r\n                                                          onChange={e=>{\r\n                                                              let data = this.state.userTest\r\n                                                              let question = data.questions[questionIndex]\r\n                                                              let answer = question.answers[answerIndex]\r\n                                                              answer.answerText = e.target.value\r\n                                                              question.answers[answerIndex] = answer\r\n                                                              data.questions[questionIndex] = question\r\n                                                              // console.log(this.state.userTest)\r\n                                                              this.setState({userTest: data})\r\n                                                          }}/>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Label>Подсказка для упрощенного уровня</Form.Label>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control type=\"text\" placeholder=\"Введите подсказку для упрощенного уровня\"\r\n                                                          value={this.state.userTest.questions[questionIndex].answers[answerIndex].helpTextLevelEasy}\r\n                                                          as=\"textarea\" rows={3}\r\n                                                          onChange={e=>{\r\n                                                              let data = this.state.userTest\r\n                                                              let question = data.questions[questionIndex]\r\n                                                              let answer = question.answers[answerIndex]\r\n                                                              answer.helpTextLevelEasy = e.target.value\r\n                                                              question.answers[answerIndex] = answer\r\n                                                              data.questions[questionIndex] = question\r\n                                                              // console.log(this.state.userTest)\r\n                                                              this.setState({userTest: data})\r\n                                                          }}/>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Label>Подсказка для нормального уровня</Form.Label>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control type=\"text\" placeholder=\"Введите подсказку для нормального уровня\"\r\n                                                          value={this.state.userTest.questions[questionIndex].answers[answerIndex].helpTextLevelMedium}\r\n                                                          as=\"textarea\" rows={3}\r\n                                                          onChange={e=>{\r\n                                                              let data = this.state.userTest\r\n                                                              let question = data.questions[questionIndex]\r\n                                                              let answer = question.answers[answerIndex]\r\n                                                              answer.helpTextLevelMedium = e.target.value\r\n                                                              question.answers[answerIndex] = answer\r\n                                                              data.questions[questionIndex] = question\r\n                                                              // console.log(this.state.userTest)\r\n                                                              this.setState({userTest: data})\r\n                                                          }}/>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Label>Подсказка для усложненного уровня</Form.Label>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control type=\"text\" placeholder=\"Введите подсказку для усложненного уровня\"\r\n                                                          value={this.state.userTest.questions[questionIndex].answers[answerIndex].helpTextLevelHard}\r\n                                                          as=\"textarea\" rows={3}\r\n                                                          onChange={e=>{\r\n                                                              let data = this.state.userTest\r\n                                                              let question = data.questions[questionIndex]\r\n                                                              let answer = question.answers[answerIndex]\r\n                                                              answer.helpTextLevelHard = e.target.value\r\n                                                              question.answers[answerIndex] = answer\r\n                                                              data.questions[questionIndex] = question\r\n                                                              // console.log(this.state.userTest)\r\n                                                              this.setState({userTest: data})\r\n                                                          }}/>\r\n                                        </Form.Group>\r\n                                        <Button onClick={this.saveData} className=\"ml-5\">Сохранить тест</Button>\r\n                                    </Form>\r\n                                </Jumbotron>\r\n                            </div>)}\r\n                    </div>\r\n                )}\r\n                {/*<Button onClick={this.addQuestion} className=\"ml-5 col-3  \">Добавить вопрос</Button>*/}\r\n                    <Button onClick={() =>this.addAnswer(0)} className=\"ml-5\">Добавить ответ</Button>\r\n                <br/>\r\n                {/*<Button onClick={this.saveData} className=\"ml-5\">Сохранить тест</Button>*/}\r\n                </Container>\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTests\\ShowErrorsOnScreen.jsx",["131","132","133"],"import React from \"react\";\r\nimport PropTypes, {bool} from \"prop-types\";\r\nimport ReactPlayer from \"react-player\";\r\nimport {Accordion, Alert, Button, Card} from \"react-bootstrap\";\r\n\r\nexport class ShowErrorsOnScreen extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        if(this.props.errorArray.length === 0 && !this.props.oneTimeErrorCheck)\r\n            return <div></div>\r\n        if(this.props.errorArray.length === 0 && this.props.oneTimeErrorCheck) {\r\n            console.log(this.props.errorArray)\r\n            return <Alert className=\"display-3 text-center mt-2\" variant=\"primary\">Поздравляем, вы прошли тест!</Alert>\r\n        }\r\n        if ((this.props.HelpLevel === '0') && this.props.showHelpVideo)\r\n        return(\r\n            <>\r\n            <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">\r\n                {this.props.answers[this.props.errorArray[0]].helpTextv1}\r\n                {/*<ReactPlayer url={this.props.answers[this.props.errorArray[0]].answerVideoUrl}/>*/}\r\n                <Accordion >\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Отобразить видео подсказку\r\n                                {console.log(\" \")}\r\n                            </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <ReactPlayer url={this.props.answers[this.props.errorArray[0]].videoUrl} controls/>\r\n                        </Accordion.Collapse>\r\n                </Accordion>\r\n            </Alert>\r\n            </>\r\n        )\r\n        if ((this.props.HelpLevel === '0'))\r\n            return(\r\n                <>\r\n                    <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">{this.props.answers[this.props.errorArray[0]].helpTextv1}</Alert>\r\n                </>\r\n            )\r\n\r\n        if (this.props.HelpLevel === '1' && this.props.showHelpVideo)\r\n            return(\r\n                <>\r\n                    {/*<Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4\">{this.props.answers[this.props.errorArray[0]].helpTextLevelMedium}</Alert>*/}\r\n                    {/*<ReactPlayer url={this.props.answers[this.props.errorArray[0]].answerVideoUrl}/>*/}\r\n                    <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">\r\n                        {this.props.answers[this.props.errorArray[0]].helpTextv2}\r\n                        {/*<ReactPlayer url={this.props.answers[this.props.errorArray[0]].answerVideoUrl}/>*/}\r\n                        <Accordion >\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Отобразить видео подсказку\r\n                                {console.log(\" \")}\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <ReactPlayer url={this.props.answers[this.props.errorArray[0]].videoUrl} controls/>\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                    </Alert>\r\n                </>\r\n            )\r\n        if (this.props.HelpLevel === '1')\r\n            return(\r\n                <>\r\n                    <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">{this.props.answers[this.props.errorArray[0]].helpTextv2}</Alert>\r\n                </>\r\n            )\r\n\r\n        if (this.props.HelpLevel === '2' && this.props.showHelpVideo)\r\n            return(\r\n                <>\r\n                    {/*<Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4\">{this.props.answers[this.props.errorArray[0]].helpTextLevelHard}</Alert>*/}\r\n                    {/*<ReactPlayer url={this.props.answers[this.props.errorArray[0]].answerVideoUrl}/>*/}\r\n                    <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">\r\n                        {this.props.answers[this.props.errorArray[0]].helpTextv3}\r\n                        {/*<ReactPlayer url={this.props.answers[this.props.errorArray[0]].answerVideoUrl}/>*/}\r\n                        <Accordion >\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Отобразить видео подсказку\r\n                                {console.log(\" \")}\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <ReactPlayer url={this.props.answers[this.props.errorArray[0]].videoUrl} controls/>\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                    </Alert>\r\n                </>\r\n            )\r\n        if (this.props.HelpLevel === '2')\r\n            return(\r\n                <>\r\n                    <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">{this.props.answers[this.props.errorArray[0]].helpTextv3}</Alert>\r\n                </>\r\n            )\r\n    }\r\n}\r\nShowErrorsOnScreen.propTypes = {\r\n    errorArray: PropTypes.array,\r\n    answers: PropTypes.array,\r\n    oneTimeErrorCheck: PropTypes.bool,\r\n    HelpLevel: PropTypes.string,\r\n    showHelpVideo: bool,\r\n};","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Experimental\\ExpMain.tsx",["134","135","136"],"import React from \"react\";\r\nimport {Card, Container, Row, Button} from \"react-bootstrap\"\r\nimport logo from \"../../img/createUserTestImg.png\"\r\nimport logo2 from \"../../img/TestingImg.png\"\r\n\r\nimport { gql, useQuery } from '@apollo/client';\r\n\r\n// const QUESTION_DATA = gql`\r\n//       query {\r\n//         questionById(id: 5){\r\n//           text\r\n//           videoUrl\r\n//         }}\r\n//     `\r\n\r\nexport class MainExperimental extends React.Component{\r\n\r\n    render() {\r\n        // const { loading, error, data } = useQuery(QUESTION_DATA);\r\n        // //\r\n        // // if (loading) console.log('.....loading....')\r\n        // // if (error) console.log(`Error! ${error.message}`)\r\n        // console.log(data)\r\n\r\n        return(\r\n            <>\r\n                <div className=\"display-4 text-center \">Эксперементальный раздел</div>\r\n                <Container className=\"mt-3\">\r\n                    <Row>\r\n                        <Card style={{ width: '18rem' }}>\r\n                            <Card.Img variant=\"top\" src={logo}  style={{height: '10rem'}}/>\r\n                            <Card.Body>\r\n                                <Card.Title>Создать/Редактировать вопрос</Card.Title>\r\n                                <Card.Text>\r\n                                    После нажатия вы будете перенаправлены в редактор вопроса\r\n                                </Card.Text>\r\n                                <Button variant=\"primary\" href=\"https://iot-backend-v3.herokuapp.com/admin/\">Создать/Редактировать вопрос</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <Card style={{ width: '18rem' }}>\r\n                            <Card.Img variant=\"top\" src={logo2}  style={{height: '10rem'}}/>\r\n                            <Card.Body>\r\n                                <Card.Title>Пройти вопрос</Card.Title>\r\n                                <Card.Text>\r\n                                    После нажатия вы будете перенаправлены в среду для прохождения вопроса\r\n                                </Card.Text>\r\n                                <Button variant=\"primary\" href=\"/exp/testing\" block size=\"lg\" className=\"mt-5\">Пройти вопрос</Button>\r\n                            </Card.Body>\r\n\r\n                        </Card>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        )\r\n    }\r\n\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Experimental\\TakeTheTest.tsx",["137","138","139"],"import React, {useState} from \"react\";\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport {Accordion, Button, Card, Container, Form, Row, Spinner} from \"react-bootstrap\";\r\nimport ReactPlayer from \"react-player\";\r\nimport {DataGrid} from \"@material-ui/data-grid\";\r\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core/styles\";\r\nimport {blue} from \"@material-ui/core/colors\";\r\nimport {ShowErrorsOnScreen} from \"../UserTests/ShowErrorsOnScreen\"\r\n\r\n\r\ninterface Answer{\r\n    id: number;\r\n    isTrue: boolean;\r\n    text: string;\r\n    helpTextv1: string;\r\n    helpTextv2: string;\r\n    helpTextv3: string;\r\n    videoUrl: string;\r\n    checkQueue: number;\r\n    hardLevelOfAnswer: string;\r\n}\r\n\r\ninterface QuestionVars{\r\n    id: number;\r\n}\r\ninterface QuestionData{\r\n    id: number;\r\n    text: string;\r\n    videoUrl: string;\r\n    answers: Answer[];\r\n}\r\ninterface QuestionById{\r\n    questionById: QuestionData;\r\n}\r\n\r\nconst GET_QUESTION_DATA = gql`\r\n      query GET_QUESTION_DATA($id: ID!) {\r\n            questionById(id: $id){\r\n              text\r\n              videoUrl\r\n              id\r\n              answers{\r\n                id\r\n                isTrue\r\n                text\r\n                helpTextv1\r\n                helpTextv2\r\n                helpTextv3\r\n                videoUrl\r\n                checkQueue\r\n                hardLevelOfAnswer\r\n              }\r\n            }\r\n      }\r\n    `\r\n\r\nexport function TakeTheTest(){\r\n    const { loading, error, data } = useQuery<QuestionById, QuestionVars>(GET_QUESTION_DATA, { variables: { id: 1 } }\r\n    );\r\n    // Уровень сложности проверки\r\n    const [helpLevel, changeHelpLevel] = useState('0')\r\n    const onChangeHelpLevel = (event: any) => changeHelpLevel(event.target.value);\r\n    const [oneTimeErrorCheck, changeOneTimeErrorCheck] = useState(false);\r\n    const [userErrors, changeUserErrors] = useState<number[]>([]);\r\n    // console.log(data)\r\n    if (loading)\r\n        return <div className=\"display-1 text-center\">Loading...;\r\n            <Spinner animation=\"grow\" variant=\"primary\" />\r\n        </div>\r\n    if (error) console.log(`Error! ${error.message}`)\r\n\r\n    //Заполнение строк\r\n    const rows: Array<{id: number, text: string}> = []\r\n    data?.questionById.answers.forEach((answer, answerIndex) =>{\r\n         rows.push({id: answerIndex, text: answer.text})\r\n        // console.log('New render')\r\n    })\r\n\r\n    //Установка колонок\r\n    const columns = [{ field: 'text', headerName: 'Ответы на вопрос', width: 2500 }];\r\n    //Установка темы\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            primary: blue,\r\n            secondary: blue,\r\n        },\r\n    });\r\n    //Получение массива выбраных строк\r\n    const selectedRows: number[] = [];\r\n\r\n    function selectDeselectRow(RowSelectedParams: any){\r\n        if(RowSelectedParams.isSelected && selectedRows.indexOf(RowSelectedParams.data.id) === -1) {\r\n            selectedRows.push(RowSelectedParams.data.id)\r\n        }\r\n        if (!RowSelectedParams.isSelected){\r\n            selectedRows.splice(selectedRows.indexOf(RowSelectedParams.data.id), 1)\r\n        }\r\n    }\r\n    //Проверка ответов\r\n    function checkUserErrors(){\r\n        let newUserErrors: number[] = []\r\n        let minCheckQueue = 10000\r\n        data?.questionById.answers.forEach( (answer, answersIndex) =>{\r\n            if(answer.isTrue === (selectedRows.indexOf(answersIndex) === -1)){\r\n                // console.log(answersIndex)\r\n                // очередью проверки, чем меньше число, тем раньше будет произведена проверка\r\n                if (answer.checkQueue < minCheckQueue){\r\n                    newUserErrors=[]\r\n                    newUserErrors.push(answersIndex)\r\n                    minCheckQueue = answer.checkQueue\r\n                    // console.log(answer)\r\n                }\r\n            }\r\n        })\r\n        // console.log(userErrors)\r\n        changeOneTimeErrorCheck(true)\r\n        changeUserErrors(newUserErrors)\r\n    }\r\n    return(\r\n        <>\r\n            <Container>\r\n                <div className=\"display-4\" style={{fontSize: '35px'}}>{data?.questionById.text}</div>\r\n                <Accordion  className=\"mt-4\">\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Отобразить видео вопрос\r\n                                {/*{console.log(data?.questionById.videoUrl)}*/}\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <ReactPlayer url={data?.questionById.videoUrl} controls autoPlay={true}/>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n\r\n                <ShowErrorsOnScreen errorArray={userErrors} answers={data?.questionById.answers}\r\n                                    oneTimeErrorCheck={oneTimeErrorCheck} HelpLevel={helpLevel}\r\n                                    showHelpVideo={true}/>\r\n\r\n                <ThemeProvider theme={theme}>\r\n                <DataGrid rows={rows} columns={columns}  checkboxSelection autoHeight={true}\r\n                          disableColumnMenu={true} hideFooter={true} disableExtendRowFullWidth={false}\r\n                          showCellRightBorder={true} showToolbar={false} pageSize={10}\r\n                          onRowSelected={(RowSelectedParams) =>{selectDeselectRow(RowSelectedParams)}}\r\n                          disableColumnSelector={true} rowHeight={60}\r\n                />\r\n                <Row>\r\n                    <Button onClick={() =>{checkUserErrors()} } variant=\"outline-info\" className=\"ml-3 mt-2\">Проверить ответы</Button>\r\n                    <Form className=\"mr-3 ml-3 mt-2\">\r\n                        {/*<Form.Label>Выбирите уровень пояснений к ответам</Form.Label>*/}\r\n                        <Form.Control as=\"select\"\r\n                                      value={helpLevel}\r\n                                      onChange={onChangeHelpLevel}>\r\n                            <option value={\"0\"}>Легкий</option>\r\n                            <option value={\"1\"}>Средний</option>\r\n                            <option value={\"2\"}>Сложный</option>\r\n                        </Form.Control>\r\n                    </Form>\r\n                </Row>\r\n                </ThemeProvider>\r\n            </Container>\r\n        </>\r\n    )\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\Login.tsx",["140","141","142","143"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\UnLogin.tsx",["144"],{"ruleId":"145","severity":1,"message":"146","line":8,"column":39,"nodeType":"147","messageId":"148","endLine":8,"endColumn":42},{"ruleId":"145","severity":1,"message":"149","line":14,"column":9,"nodeType":"147","messageId":"148","endLine":14,"endColumn":17},{"ruleId":"145","severity":1,"message":"150","line":36,"column":7,"nodeType":"147","messageId":"148","endLine":36,"endColumn":20},{"ruleId":"151","severity":1,"message":"152","line":47,"column":1,"nodeType":"153","messageId":"154","endLine":47,"endColumn":15},{"ruleId":"145","severity":1,"message":"155","line":61,"column":34,"nodeType":"147","messageId":"148","endLine":61,"endColumn":39},{"ruleId":"151","severity":1,"message":"152","line":1,"column":25,"nodeType":"156","messageId":"154","endLine":1,"endColumn":39},{"ruleId":"151","severity":1,"message":"157","line":1,"column":25,"nodeType":"147","messageId":"158","endLine":1,"endColumn":36},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"145","severity":1,"message":"163","line":7,"column":14,"nodeType":"147","messageId":"148","endLine":7,"endColumn":25},{"ruleId":"145","severity":1,"message":"164","line":8,"column":9,"nodeType":"147","messageId":"148","endLine":8,"endColumn":18},{"ruleId":"145","severity":1,"message":"165","line":10,"column":7,"nodeType":"147","messageId":"148","endLine":10,"endColumn":19},{"ruleId":"151","severity":1,"message":"152","line":22,"column":16,"nodeType":"153","messageId":"154","endLine":22,"endColumn":34},{"ruleId":"151","severity":1,"message":"152","line":9,"column":5,"nodeType":"166","messageId":"154","endLine":9,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":7,"column":5,"nodeType":"166","messageId":"154","endLine":7,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":7,"column":16,"nodeType":"153","messageId":"154","endLine":7,"endColumn":36},{"ruleId":"145","severity":1,"message":"167","line":9,"column":16,"nodeType":"147","messageId":"148","endLine":9,"endColumn":26},{"ruleId":"151","severity":1,"message":"152","line":15,"column":5,"nodeType":"166","messageId":"154","endLine":15,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":10,"column":5,"nodeType":"166","messageId":"154","endLine":10,"endColumn":13},{"ruleId":"145","severity":1,"message":"168","line":5,"column":41,"nodeType":"147","messageId":"148","endLine":5,"endColumn":51},{"ruleId":"151","severity":1,"message":"169","line":20,"column":17,"nodeType":"147","messageId":"158","endLine":20,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":44,"column":5,"nodeType":"166","messageId":"154","endLine":44,"endColumn":24},{"ruleId":"151","severity":1,"message":"152","line":58,"column":5,"nodeType":"166","messageId":"154","endLine":58,"endColumn":29},{"ruleId":"151","severity":1,"message":"152","line":65,"column":5,"nodeType":"166","messageId":"154","endLine":65,"endColumn":33},{"ruleId":"151","severity":1,"message":"152","line":71,"column":5,"nodeType":"166","messageId":"154","endLine":71,"endColumn":14},{"ruleId":"151","severity":1,"message":"152","line":79,"column":5,"nodeType":"166","messageId":"154","endLine":79,"endColumn":28},{"ruleId":"151","severity":1,"message":"152","line":98,"column":5,"nodeType":"166","messageId":"154","endLine":98,"endColumn":47},{"ruleId":"151","severity":1,"message":"170","line":98,"column":29,"nodeType":"147","messageId":"158","endLine":98,"endColumn":46},{"ruleId":"151","severity":1,"message":"152","line":114,"column":5,"nodeType":"166","messageId":"154","endLine":114,"endColumn":13},{"ruleId":"151","severity":1,"message":"169","line":7,"column":17,"nodeType":"147","messageId":"158","endLine":7,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":24,"column":5,"nodeType":"166","messageId":"154","endLine":24,"endColumn":24},{"ruleId":"151","severity":1,"message":"152","line":37,"column":5,"nodeType":"166","messageId":"154","endLine":37,"endColumn":15},{"ruleId":"151","severity":1,"message":"152","line":46,"column":5,"nodeType":"166","messageId":"154","endLine":46,"endColumn":19},{"ruleId":"151","severity":1,"message":"152","line":59,"column":5,"nodeType":"166","messageId":"154","endLine":59,"endColumn":18},{"ruleId":"151","severity":1,"message":"152","line":84,"column":5,"nodeType":"166","messageId":"154","endLine":84,"endColumn":26},{"ruleId":"151","severity":1,"message":"171","line":84,"column":15,"nodeType":"147","messageId":"158","endLine":84,"endColumn":25},{"ruleId":"151","severity":1,"message":"152","line":100,"column":5,"nodeType":"166","messageId":"154","endLine":100,"endColumn":13},{"ruleId":"145","severity":1,"message":"172","line":4,"column":35,"nodeType":"147","messageId":"148","endLine":4,"endColumn":39},{"ruleId":"151","severity":1,"message":"169","line":7,"column":17,"nodeType":"147","messageId":"158","endLine":7,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":10,"column":5,"nodeType":"166","messageId":"154","endLine":10,"endColumn":13},{"ruleId":"145","severity":1,"message":"146","line":6,"column":10,"nodeType":"147","messageId":"148","endLine":6,"endColumn":13},{"ruleId":"145","severity":1,"message":"173","line":6,"column":15,"nodeType":"147","messageId":"148","endLine":6,"endColumn":23},{"ruleId":"151","severity":1,"message":"152","line":18,"column":5,"nodeType":"166","messageId":"154","endLine":18,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":57,"column":8,"nodeType":"153","messageId":"154","endLine":57,"endColumn":30},{"ruleId":"174","severity":1,"message":"175","line":62,"column":39,"nodeType":"176","messageId":"177","endLine":62,"endColumn":42,"suggestions":"178"},{"ruleId":"174","severity":1,"message":"175","line":91,"column":51,"nodeType":"176","messageId":"177","endLine":91,"endColumn":54,"suggestions":"179"},{"ruleId":"145","severity":1,"message":"172","line":5,"column":9,"nodeType":"147","messageId":"148","endLine":5,"endColumn":13},{"ruleId":"145","severity":1,"message":"173","line":7,"column":14,"nodeType":"147","messageId":"148","endLine":7,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":27,"column":16,"nodeType":"153","messageId":"154","endLine":27,"endColumn":32},{"ruleId":"145","severity":1,"message":"155","line":31,"column":27,"nodeType":"147","messageId":"148","endLine":31,"endColumn":32},{"ruleId":"151","severity":1,"message":"152","line":5,"column":16,"nodeType":"153","messageId":"154","endLine":5,"endColumn":34},"@typescript-eslint/no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","'MainPage' is defined but never used.","'REFRESH_TOKEN' is assigned a value but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","'error' is assigned a value but never used.","ArrowFunctionExpression","Argument 'onPerfEntry' should be typed.","missingArgType","no-native-reassign",["180"],"no-negated-in-lhs",["181"],"'useMutation' is defined but never used.","'useEffect' is defined but never used.","'VERIFY_LOGIN' is assigned a value but never used.","FunctionExpression","'Pagination' is defined but never used.","'makeStyles' is defined but never used.","Argument 'props' should be typed.","Argument 'RowSelectedParams' should be typed.","Argument 'questionId' should be typed.","'Card' is defined but never used.","'useQuery' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["182","183"],["184","185"],"no-global-assign","no-unsafe-negation",{"messageId":"186","fix":"187","desc":"188"},{"messageId":"189","fix":"190","desc":"191"},{"messageId":"186","fix":"192","desc":"188"},{"messageId":"189","fix":"193","desc":"191"},"suggestUnknown",{"range":"194","text":"195"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"194","text":"196"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"197","text":"195"},{"range":"197","text":"196"},[1692,1695],"unknown","never",[2778,2781]]