[{"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\index.js":"1","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\App.js":"2","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\reportWebVitals.js":"3","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\Navibar.tsx":"4","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\TakeTheTest.tsx":"5","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Menu\\MainMenu.tsx":"6","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\Login.tsx":"7","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\UnLogin.tsx":"8","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\CreatePoint.tsx":"9","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\Registration.tsx":"10","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\UpdateQuestion.tsx":"11","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\MainEditor.tsx":"12","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTest\\MainUserTest.tsx":"13","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\CreateUserTest.jsx":"14","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\search.tsx":"15","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\AnswerNode.tsx":"16","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\ShowErrorsOnScreen.jsx":"17","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTest\\QuestionByID.tsx":"18","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\CKEditor.tsx":"19","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTest\\ImageQuestion.tsx":"20","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTest\\ImageAnswerNode.tsx":"21"},{"size":2129,"mtime":1617813544222,"results":"22","hashOfConfig":"23"},{"size":3664,"mtime":1618751036893,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":2814,"mtime":1617359572633,"results":"26","hashOfConfig":"23"},{"size":6830,"mtime":1617359114649,"results":"27","hashOfConfig":"23"},{"size":2969,"mtime":1617359572623,"results":"28","hashOfConfig":"23"},{"size":3288,"mtime":1615720908444,"results":"29","hashOfConfig":"23"},{"size":707,"mtime":1615723909221,"results":"30","hashOfConfig":"23"},{"size":35280,"mtime":1617896093202,"results":"31","hashOfConfig":"23"},{"size":5786,"mtime":1615871391761,"results":"32","hashOfConfig":"23"},{"size":17313,"mtime":1618754481194,"results":"33","hashOfConfig":"23"},{"size":2158,"mtime":1617896372058,"results":"34","hashOfConfig":"23"},{"size":11982,"mtime":1618752233043,"results":"35","hashOfConfig":"23"},{"size":22629,"mtime":1614026285274,"results":"36","hashOfConfig":"23"},{"size":7829,"mtime":1617208565684,"results":"37","hashOfConfig":"23"},{"size":15156,"mtime":1618754014944,"results":"38","hashOfConfig":"23"},{"size":5414,"mtime":1615122806127,"results":"39","hashOfConfig":"23"},{"size":11998,"mtime":1618752030370,"results":"40","hashOfConfig":"23"},{"size":2200,"mtime":1618347395208,"results":"41","hashOfConfig":"23"},{"size":12665,"mtime":1618752160019,"results":"42","hashOfConfig":"23"},{"size":3114,"mtime":1618742760748,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"12u05s0",{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"47"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\index.js",["105"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { onError } from 'apollo-link-error'\n\nimport { ApolloClient, InMemoryCache, gql, ApolloProvider, HttpLink, ApolloLink } from '@apollo/client';\nimport {setContext} from \"@apollo/client/link/context\";\nimport {unstable_createMuiStrictModeTheme} from \"@material-ui/core\";\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    const token = localStorage.getItem('token');\n    // return the headers to the context so httpLink can read them\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `JWT ${token}` : \"\",\n        }\n    }\n});\nconst httpLink = new HttpLink({\n    uri: 'https://iot-experemental.herokuapp.com/graphql/'\n    // Additional options\n});\nconst errorLink = onError(({ graphQLErrors }) => {\n    if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message))\n})\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, httpLink]),\n    // uri: 'https://iot-experemental.herokuapp.com/graphql/',\n    cache: new InMemoryCache()\n});\n\nconst theme = unstable_createMuiStrictModeTheme({\n    palette: {\n        primary: {\n            50: \"#e3f2fd\",\n            100: \"#bbdefb\",\n            200: \"#90caf9\",\n            300: \"#64b5f6\",\n            400: \"#42a5f5\",\n            500: \"#2196f3\",\n            600: \"#1e88e5\",\n            700: \"#1976d2\",\n            800: \"#1565c0\",\n            900: \"#0d47a1\",\n            A100: \"#82b1ff\",\n            A200: \"#448aff\",\n            A400: \"#2979ff\",\n            A700: \"#2962ff\",\n            contrastDefaultColor: \"light\"\n        }\n    },\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <React.StrictMode>\n            <ThemeProvider theme={theme}>\n                <App />\n            </ThemeProvider>\n        </React.StrictMode>\n    </ApolloProvider>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n",[],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\App.js",["106","107","108"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\reportWebVitals.js",["109","110"],"const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\Navibar.tsx",["111","112","113","114"],"import * as React from 'react'\r\nimport 'react-bootstrap';\r\nimport  {Navbar, Form, Nav, Dropdown, Button, DropdownButton, Row} from 'react-bootstrap';\r\n// import IsLogin from '../login';\r\nimport s from'./navibar.module.css';\r\nimport NavSearch from \"./search\"\r\nimport {gql, useMutation} from \"@apollo/client\";\r\nimport {useEffect} from \"react\";\r\n\r\nconst VERIFY_LOGIN = gql`\r\n    mutation VERIFY_LOGIN($token: String!){\r\n      verifyToken(token: $token){\r\n        payload\r\n        success\r\n        errors\r\n      }\r\n    }\r\n`\r\n\r\n\r\n\r\nexport default function Navibar(){\r\n    // const [verify_login, { data, error }] = useMutation(VERIFY_LOGIN, {\r\n    //     variables: {\r\n    //         token: localStorage.getItem(\"token\")\r\n    //     }\r\n    // })\r\n\r\n    return(\r\n\r\n            <Navbar bg=\"light\" expand=\"lg\" >\r\n                <Navbar.Brand>IOT</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className={s.navlink}>\r\n                        <Nav.Link href=\"/\" className=\"ml-3\">Главная</Nav.Link>\r\n                        <Nav.Link href=\"/testeditor\" className=\"ml-3\">Редактировать тест</Nav.Link>\r\n                        <Nav.Link href=\"/test\" className=\"ml-3\">Пройти тест</Nav.Link>\r\n                    </Nav>\r\n\r\n                    <Form  className=\"col-lg-6\">\r\n                        {/*<FormControl type=\"text\" placeholder=\"Поиск карточки\" className=\"ml-auto\"  />*/}\r\n                        <NavSearch/>\r\n                    </Form>\r\n                    <Button variant=\"outline-success\" className=\" ml-3 \">Поиск</Button>\r\n                    {/*<IsLogin className=\"ml-auto\"/>*/}\r\n                    <Row className=\"ml-3\">\r\n                    {/*<Navbar.Text className=\"\">User name</Navbar.Text>*/}\r\n                    {localStorage.getItem(\"is_login\") ==='true'? <Navbar.Text>{localStorage.getItem(\"user_name\")}</Navbar.Text> : <Nav.Link href=\"/login\">Войти</Nav.Link>}\r\n                    {localStorage.getItem(\"is_login\") ==='true'? <div>\r\n                            <DropdownButton id=\"dropdown-navibar-button\"  title=\"\" className=\"ml-4\">\r\n                            <Dropdown.Item href=\"/stat\">Статистика</Dropdown.Item>\r\n                            <Dropdown.Item href=\"/profile\">Профиль</Dropdown.Item>\r\n\r\n                            <Dropdown.Item href=\"/unlogin\">Выйти</Dropdown.Item>\r\n                        </DropdownButton></div> : null}\r\n                        {localStorage.getItem(\"is_login\") ==='true'? null: <Nav.Link href=\"/registration\">Зарегистрироваться</Nav.Link>}\r\n\r\n\r\n                    </Row>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n    )\r\n}\r\n",[],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\TakeTheTest.tsx",["115","116"],"import React, {useState} from \"react\";\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport {Accordion, Button, Card, Container, Form, Row, Spinner} from \"react-bootstrap\";\r\nimport ReactPlayer from \"react-player\";\r\nimport {DataGrid} from \"@material-ui/data-grid\";\r\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core/styles\";\r\nimport {blue} from \"@material-ui/core/colors\";\r\nimport {ShowErrorsOnScreen} from \"./ShowErrorsOnScreen\"\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\n\r\ninterface Answer{\r\n    id: number;\r\n    isTrue: boolean;\r\n    text: string;\r\n    helpTextv1: string;\r\n    helpTextv2: string;\r\n    helpTextv3: string;\r\n    videoUrl: string;\r\n    checkQueue: number;\r\n    hardLevelOfAnswer: string;\r\n}\r\n\r\ninterface QuestionVars{\r\n    id: number;\r\n}\r\ninterface QuestionData{\r\n    id: number;\r\n    text: string;\r\n    videoUrl: string;\r\n    answers: Answer[];\r\n}\r\ninterface QuestionById{\r\n    questionById: QuestionData;\r\n}\r\n\r\nconst GET_QUESTION_DATA = gql`\r\n      query GET_QUESTION_DATA($id: ID!) {\r\n            questionById(id: $id){\r\n              text\r\n              videoUrl\r\n              id\r\n              answers{\r\n                id\r\n                isTrue\r\n                text\r\n                helpTextv1\r\n                helpTextv2\r\n                helpTextv3\r\n                videoUrl\r\n                checkQueue\r\n                hardLevelOfAnswer\r\n              }\r\n            }\r\n      }\r\n    `\r\n\r\nexport function TakeTheTest(){\r\n    const { loading, error, data } = useQuery<QuestionById, QuestionVars>(GET_QUESTION_DATA, { variables:\r\n            {\r\n                id: 1\r\n            }}\r\n    );\r\n    // Уровень сложности проверки\r\n    const [helpLevel, changeHelpLevel] = useState('0')\r\n    const onChangeHelpLevel = (event: any) => changeHelpLevel(event.target.value);\r\n    const [oneTimeErrorCheck, changeOneTimeErrorCheck] = useState(false);\r\n    const [userErrors, changeUserErrors] = useState<number[]>([]);\r\n    // console.log(data)\r\n    if (loading)\r\n        return <div className=\"display-1 text-center\">Loading...;\r\n            <Spinner animation=\"grow\" variant=\"primary\" />\r\n        </div>\r\n    if (error) console.log(`Error! ${error.message}`)\r\n\r\n    //Заполнение строк\r\n    const rows: Array<{id: number, text: string}> = []\r\n    data?.questionById.answers.forEach((answer, answerIndex) =>{\r\n         rows.push({id: answerIndex, text: answer.text})\r\n        // console.log('New render')\r\n    })\r\n\r\n    //Установка колонок\r\n    const columns = [{\r\n        field: 'text',\r\n        headerName: 'Ответы на вопрос',\r\n        width: 2700,\r\n    }];\r\n    //Установка темы\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            primary: blue,\r\n            secondary: blue,\r\n        },\r\n    });\r\n    //Получение массива выбраных строк\r\n    const selectedRows: number[] = [];\r\n\r\n    function selectDeselectRow(RowSelectedParams: any){\r\n        if(RowSelectedParams.isSelected && selectedRows.indexOf(RowSelectedParams.data.id) === -1) {\r\n            selectedRows.push(RowSelectedParams.data.id)\r\n        }\r\n        if (!RowSelectedParams.isSelected){\r\n            selectedRows.splice(selectedRows.indexOf(RowSelectedParams.data.id), 1)\r\n        }\r\n    }\r\n    //Проверка ответов\r\n    function checkUserErrors(){\r\n        let newUserErrors: number[] = []\r\n        let minCheckQueue = 10000\r\n        data?.questionById.answers.forEach( (answer, answersIndex) =>{\r\n            if(answer.isTrue === (selectedRows.indexOf(answersIndex) === -1)){\r\n                // console.log(answersIndex)\r\n                // очередью проверки, чем меньше число, тем раньше будет произведена проверка\r\n                if (answer.checkQueue < minCheckQueue){\r\n                    newUserErrors=[]\r\n                    newUserErrors.push(answersIndex)\r\n                    minCheckQueue = answer.checkQueue\r\n                    // console.log(answer)\r\n                }\r\n            }\r\n        })\r\n        // console.log(userErrors)\r\n        changeOneTimeErrorCheck(true)\r\n        changeUserErrors(newUserErrors)\r\n    }\r\n    return(\r\n        <>\r\n            <Container>\r\n                <div className=\"display-4\" style={{fontSize: '35px'}}>{data?.questionById.text}</div>\r\n                <Accordion  className=\"mt-4\">\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Отобразить видео вопрос\r\n                                {/*{console.log(data?.questionById.videoUrl)}*/}\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <ReactPlayer url={data?.questionById.videoUrl} controls autoPlay={true}/>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n\r\n                <ShowErrorsOnScreen errorArray={userErrors} answers={data?.questionById.answers}\r\n                                    oneTimeErrorCheck={oneTimeErrorCheck} HelpLevel={helpLevel}\r\n                                    showHelpVideo={true}/>\r\n\r\n                <ThemeProvider theme={theme}>\r\n                <DataGrid rows={rows} columns={columns}  checkboxSelection autoHeight={true}\r\n                          disableColumnMenu={true} hideFooter={true} disableExtendRowFullWidth={false}\r\n                          showCellRightBorder={true} showToolbar={false} pageSize={10}\r\n                          onRowSelected={(RowSelectedParams) =>{selectDeselectRow(RowSelectedParams)}}\r\n                          disableColumnSelector={true} rowHeight={60}\r\n                />\r\n                <Row>\r\n                    <Button onClick={() =>{checkUserErrors()} } variant=\"outline-info\" className=\"ml-3 mt-2\">Проверить ответы</Button>\r\n                    <Form className=\"mr-3 ml-3 mt-2\">\r\n                        {/*<Form.Label>Выбирите уровень пояснений к ответам</Form.Label>*/}\r\n                        <Form.Control as=\"select\"\r\n                                      value={helpLevel}\r\n                                      onChange={onChangeHelpLevel}>\r\n                            <option value={\"0\"}>Легкий</option>\r\n                            <option value={\"1\"}>Средний</option>\r\n                            <option value={\"2\"}>Сложный</option>\r\n                        </Form.Control>\r\n                    </Form>\r\n                </Row>\r\n                </ThemeProvider>\r\n            </Container>\r\n        </>\r\n    )\r\n}",[],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Menu\\MainMenu.tsx",["117","118","119","120"],"import React from \"react\";\r\nimport {Card, Container, Row, Button} from \"react-bootstrap\"\r\nimport logo from \"../../img/createUserTestImg.png\"\r\nimport logo2 from \"../../img/TestingImg.png\"\r\nimport logo3 from \"../../img/ModernTestEditor.png\"\r\nimport { gql, useQuery } from '@apollo/client';\r\n\r\n// const QUESTION_DATA = gql`\r\n//       query {\r\n//         questionById(id: 5){\r\n//           text\r\n//           videoUrl\r\n//         }}\r\n//     `\r\n\r\nexport class MainExperimental extends React.Component{\r\n    render() {\r\n        // const { loading, error, data } = useQuery(QUESTION_DATA);\r\n        // //\r\n        // // if (loading) console.log('.....loading....')\r\n        // // if (error) console.log(`Error! ${error.message}`)\r\n        // console.log(data)\r\n\r\n        return(\r\n            <>\r\n                {/*<div style={{backgroundImage: `url(${backgroundImg})`,*/}\r\n                {/*    // height: '100vh',*/}\r\n                {/*    opacity: 0.1,*/}\r\n                {/*    backgroundPosition: 'center',*/}\r\n                {/*    backgroundSize: 'cover',*/}\r\n                {/*    backgroundRepeat: 'no-repeat'}}>*/}\r\n                <div className=\"display-4 text-center \">Создание и редактирование вопросов</div>\r\n                <Container className=\"mt-3\">\r\n                    <Row>\r\n                        <Card style={{ width: '18rem' }}>\r\n                            <Card.Img variant=\"top\" src={logo2}  style={{height: '10rem'}}/>\r\n                            <Card.Body>\r\n                                <Card.Title>Пройти вопрос</Card.Title>\r\n                                <Card.Text>\r\n                                    После нажатия вы будете перенаправлены в среду для прохождения вопроса\r\n                                </Card.Text>\r\n                                <Button variant=\"primary\" href=\"/test\" block size=\"lg\" className=\"mt-5\">Пройти вопрос</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <Card style={{ width: '18rem' }} className=\"ml-2\">\r\n                            <Card.Img variant=\"top\" src={logo3}  style={{height: '10rem'}}/>\r\n                            <Card.Body>\r\n                                <Card.Title>Редактор вопросов</Card.Title>\r\n                                <Card.Text>\r\n                                    После нажатия вы будете перенаправлены в  редактор вопросов\r\n                                </Card.Text>\r\n                                <Button variant=\"primary\" href=\"/testeditor\"   >Создать/Редактировать вопросы</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Row>\r\n                </Container>\r\n                {/*</div>*/}\r\n            </>\r\n        )\r\n    }\r\n\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\Login.tsx",["121","122","123","124"],"/* eslint-disable no-unused-expressions */\r\n\r\nimport * as React from 'react'\r\nimport 'react-bootstrap';\r\nimport {Card, Container, Form, Button, Alert} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport {gql, useQuery, useMutation} from \"@apollo/client\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst LOGIN_MUTATION = gql`\r\n    mutation AUTHORIZATION($pass: String!, $mail: String!){\r\n      tokenAuth(password: $pass, email: $mail){\r\n        token\r\n        refreshToken\r\n        success\r\n        errors\r\n        user{\r\n          id\r\n          username\r\n          isStaff\r\n          userAccessLevel\r\n        }\r\n      }\r\n    }`\r\n\r\nexport default function Login(){\r\n    const [mail, changeMail] = useState('')\r\n    const [password, changePassword] = useState('')\r\n    const history = useHistory();\r\n    const [login, { data, error }] = useMutation(LOGIN_MUTATION, {\r\n        variables: {\r\n            pass: password,\r\n            mail: mail\r\n        }\r\n    })\r\n\r\n    // if(data){\r\n    //     console.log(data)\r\n    // }\r\n    const saveLoginData = () => {\r\n\r\n        localStorage.setItem('token', data.tokenAuth.token)\r\n        localStorage.setItem('refreshToken', data.tokenAuth.refreshToken)\r\n        localStorage.setItem('is_login', 'true')\r\n        setTimeout(()=>{\r\n            window.location.reload(false);\r\n        }, 500)\r\n    }\r\n    {data ?  data.tokenAuth.success ? saveLoginData() : null : null}\r\n    {localStorage.getItem('is_login') === 'true' ? setTimeout(history.push, 1000, '/'): null}\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <div className=\"display-4 text-center mt-5\" style={{fontSize: '33px'}}>Введите email и пароль</div>\r\n                <div className=\"col-4 offset-4 mt-3\">\r\n                    {/*<Card>*/}\r\n                        <Form>\r\n                            <Form.Group>\r\n                                <Form.Label>Введите ваш email</Form.Label>\r\n                                <Form.Control type=\"email\" placeholder=\"email\" value={mail} onChange={(event) =>{changeMail(event.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label>Введите пароль</Form.Label>\r\n                                <Form.Control type=\"password\" placeholder=\"Пароль\" value={password} onChange={(event) =>{changePassword(event.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" type=\"submit\" className=\"mr-auto\" size=\"lg\" block onClick={(event => {event.preventDefault(); login()})}>\r\n                                Войти\r\n                            </Button>\r\n                            {data ? data.tokenAuth.success ? <Alert variant=\"success\" className=\"mt-2\">Поздравляем, вы вошли</Alert> : <Alert variant='danger' className=\"mt-2\">Ошибка в логине или пароле</Alert> : null}\r\n                            {/*{data ? data.tokenAuth.success === false ? <div>Ошибка в логине или пароле</div>: null: null}*/}\r\n                        </Form>\r\n                    {/*</Card>*/}\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\UnLogin.tsx",["125"],"import * as React from 'react'\r\n// import 'react-bootstrap';\r\nimport {Spinner} from \"react-bootstrap\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function UnLogin(){\r\n    const history = useHistory();\r\n    localStorage.setItem('token', 'wrong key')\r\n    localStorage.setItem('is_login', 'false')\r\n    localStorage.setItem('user_name', '')\r\n    localStorage.setItem('refreshToken', 'wrong refresh token')\r\n    setTimeout(()=>{\r\n        window.location.reload(false);\r\n    }, 1000)\r\n    setTimeout(history.push, 500, '/')\r\n    return(\r\n        <div className=\"col-1 offset-6 justify-content-center mt-4\">\r\n        <Spinner animation=\"border\" variant=\"primary\" />\r\n        </div>\r\n    )\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\CreatePoint.tsx",["126","127","128","129","130","131","132","133"],"import React, {useMemo, useState} from \"react\";\r\nimport {gql, useMutation, useQuery} from \"@apollo/client\";\r\n\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport {Row, Spinner, Col} from \"react-bootstrap\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Button, Snackbar} from \"@material-ui/core\";\r\n\r\nimport {DataGrid, ColDef} from '@material-ui/data-grid';\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\r\n\r\n\r\n\r\n\r\nconst GET_THEMES = gql`\r\nquery GET_THEMES{\r\n  questionThemes{\r\n    id\r\n    name\r\n    description\r\n  }\r\n  me{\r\n    questionauthorSet{\r\n      id\r\n      name\r\n    }\r\n    questionSet{\r\n      id\r\n      theme{\r\n        id\r\n        name\r\n        description\r\n      }\r\n      author{\r\n        id\r\n        name\r\n      }\r\n      text\r\n      videoUrl\r\n    }\r\n  }\r\n}`\r\n\r\nconst CREATE_QUESTION = gql`\r\nmutation CREATE_QUESTION($createdBy: ID!, $theme: [ID]!, $author: [ID]!, $text: String!, $videoUrl: String!){\r\n  createQuestion(input: {createdBy:  $createdBy, theme: $theme, author: $author, text: $text, videoUrl: $videoUrl}){\r\n    errors{\r\n      field\r\n      messages\r\n    }\r\n    clientMutationId\r\n  }\r\n}`\r\n\r\nconst CREATE_THEME = gql`\r\nmutation CREATE_THEME($name: String!, $description: String!, $createdBy: ID!){\r\n  createQuestionThemes(input: {name: $name, description: $description, createdBy: $createdBy}){\r\n    errors{\r\n      field\r\n      messages\r\n    }\r\n    clientMutationId\r\n  }\r\n}`\r\n\r\nconst CREATE_AUTHOR = gql`\r\nmutation CREATE_AUTHOR($name: String!, $createdBy: ID!, ){\r\n  createQuestionAuthor(input: {name: $name, createdBy: $createdBy}){\r\n    errors{\r\n      field\r\n      messages\r\n    }\r\n    clientMutationId\r\n  }\r\n}`\r\n\r\nconst UPDATE_AUTHOR = gql`\r\nmutation UPDATE_AUTHOR($name: String!, $createdBy: ID!, $id: ID!){\r\n  updateQuestionAuthor(input:{name: $name, createdBy: $createdBy, id: $id}){\r\n    errors{\r\n      field\r\n      messages\r\n    }\r\n  }\r\n}`\r\n\r\nconst UPDATE_THEME = gql`\r\nmutation UPDATE_THEME($name: String!, $description: String!, $createdBy: ID!, $id: ID!){\r\n  updateQuestionThemes(input:{name:$name, description: $description, createdBy: $createdBy, id: $id}){\r\n    errors{\r\n      field\r\n      messages\r\n    }\r\n  }\r\n}`\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 7.5 + ITEM_PADDING_TOP,\r\n            // width: \"250vw\",\r\n        },\r\n    },\r\n};\r\n\r\nconst columns: ColDef[] = [\r\n    {field: 'id', headerName: 'ID', width: 70},\r\n    {field: 'text', headerName: 'Текст', width: 650},\r\n    {field: 'authors', headerName: 'Авторы', width: 550},\r\n    {field: 'themes', headerName: 'Темы', width: 450}\r\n]\r\n\r\nconst createDataGrid = (data: any, changeSelectedRowInQuestionDataGrid: (value: (((prevState: any) => any) | any)) => any) => {\r\n    const rows: any = []\r\n    if (data) {\r\n        data.me.questionSet.map((question: any) => {\r\n            const themes = question.theme.map((item: any) => item.name).reduce((prev: any, next: any) => prev + next);\r\n            const authors = question.author.map((item: any) => item.name).reduce((prev: any, next: any) => prev + next);\r\n            rows.push({id: question.id, text: question.text, themes: themes, authors: authors})\r\n\r\n        })\r\n    }\r\n    return (\r\n        <div style={{height: 600, width: '100%'}}>\r\n            <DataGrid rows={rows} columns={columns} onRowClick={(e) => {\r\n                changeSelectedRowInQuestionDataGrid(e.row)\r\n            }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        fab: {\r\n            margin: theme.spacing(2),\r\n        },\r\n        absolute: {\r\n            position: 'absolute',\r\n            bottom: theme.spacing(2),\r\n            right: theme.spacing(3),\r\n        },\r\n    }),\r\n);\r\n\r\nconst columnsForThemesDataGrid: ColDef[] = [\r\n    {field: 'id', headerName: 'ID', width: 70},\r\n    {field: 'name', headerName: 'Темы', width: 500},\r\n]\r\n\r\nconst createThemesDataGrid = (data: any, changeSelectedRowInThemesDataGrid: (value: any) => any,\r\n                              changeUpdateThemeName: (value: (((prevState: any) => any) | any)) => any,\r\n                              changeUpdateThemeDescription: (value: (((prevState: any) => any) | any)) => any) => {\r\n    const rows: any = []\r\n    if (data) {\r\n        data.questionThemes.map((theme: any) => {\r\n            rows.push({id: theme.id, name: theme.name})\r\n        })\r\n    }\r\n    return (\r\n        <div style={{height: 300}}>\r\n            <DataGrid rows={rows} columns={columnsForThemesDataGrid}\r\n                      onRowClick={(e) => {\r\n                          console.log(e.row.name)\r\n                          changeSelectedRowInThemesDataGrid(e.row)\r\n                          changeUpdateThemeName(e.row.name)\r\n                          changeUpdateThemeDescription(data.questionThemes.find((theme: any) => theme.id === e.row.id).description)\r\n                      }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst columnsForAuthorsDataGrid: ColDef[] = [\r\n    {field: 'id', headerName: 'ID', width: 70},\r\n    {field: 'name', headerName: 'Автор вопроса', width: 500},\r\n]\r\n\r\nconst createAuthorsDataGrid = (data: any, changeSelectedRowInAuthorsDataGrid: (value: any) => any,\r\n                               changeUpdateAuthorName: (value: (((prevState: any) => any) | any)) => any) => {\r\n    const rows: any = []\r\n    if (data) {\r\n        data.me.questionauthorSet.map((author: any) => {\r\n            rows.push({id: author.id, name: author.name})\r\n        })\r\n    }\r\n    return (\r\n        <div style={{height: 300}}>\r\n            <DataGrid rows={rows} columns={columnsForAuthorsDataGrid}\r\n                      onRowClick={(e) => {\r\n                          changeSelectedRowInAuthorsDataGrid(e.row)\r\n                          changeUpdateAuthorName(e.row.name)\r\n                      }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default function CreatePoint() {\r\n\r\n    const {data, error, loading, refetch} = useQuery(GET_THEMES, {\r\n        pollInterval: 5000\r\n    });\r\n\r\n    const [oneTimeChecked, changeOneTimeChecked] = useState(false);// для проверки на ошибки при сохранение вопроса\r\n    const [oneTimeCheckedNewTheme, changeOneTimeCheckedNewTheme] = useState(false);\r\n    const [oneTimeCheckedNewAuthor, changeOneTimeCheckedNewAuthor] = useState(false);\r\n    const [selectedRowInQuestionDataGrid, changeSelectedRowInQuestionDataGrid]: any = useState()\r\n    const [selectedRowInThemesDataGrid, changeSelectedRowInThemesDataGrid]: any = useState({id: -10})\r\n    const [selectedRowInAuthorsDataGrid, changeSelectedRowInAuthorsDataGrid]: any = useState({id: -10}) //Такого ID не существует, оно нужно, чтобы проверить кликнул ли пользователь по строке\r\n    const [updateAuthorName, changeUpdateAuthorName] = useState('');\r\n    const [updateThemeName, changeUpdateThemeName] = useState('');\r\n    const [updateThemeDescription, changeUpdateThemeDescription] = useState('');\r\n    const memedCreateDataGrid = useMemo(() => createDataGrid(data, changeSelectedRowInQuestionDataGrid), [data]); //оптимизированное подключение DataGrid\r\n    const memedCreateThemesDataGrid = useMemo(() => createThemesDataGrid(data, changeSelectedRowInThemesDataGrid, changeUpdateThemeName, changeUpdateThemeDescription), [data])\r\n    const memedCreateAuthorsDataGrid = useMemo(() => createAuthorsDataGrid(data, changeSelectedRowInAuthorsDataGrid, changeUpdateAuthorName), [data])\r\n    const [questionText, changeQuestionText] = useState('');\r\n    const [questionUrl, changeQuestionUrl] = useState('');\r\n    const [authorId, setAuthorId] = React.useState([]);\r\n    const [questionThemesId, setQuestionThemesId] = useState([]);\r\n    const [newThemeName, changeNewThemeName] = useState('');\r\n    const [newThemeDescription, changeNewThemeDescription] = useState('');\r\n    const [newAuthorName, changeNewAuthorName] = useState(\"\");\r\n\r\n\r\n    const [createQuestion, {data: mutation_data}] = useMutation(CREATE_QUESTION, {\r\n        variables: {\r\n            createdBy: 0,\r\n            theme: questionThemesId,\r\n            author: authorId,\r\n            text: questionText,\r\n            videoUrl: questionUrl\r\n        }\r\n    })\r\n    const [createTheme, {data: create_theme_data}] = useMutation(CREATE_THEME, {\r\n        variables: {\r\n            createdBy: 0,\r\n            name: newThemeName,\r\n            description: newThemeDescription\r\n        }\r\n    })\r\n    const [createAuthor, {data: create_author_data}] = useMutation(CREATE_AUTHOR, {\r\n        variables: {\r\n            createdBy: 0,\r\n            name: newAuthorName\r\n        }\r\n    })\r\n    const [updateAuthor, {data: update_author_data, loading: update_author_loading}] = useMutation(UPDATE_AUTHOR, {\r\n        variables: {\r\n            name: updateAuthorName,\r\n            createdBy: 0,\r\n            id: selectedRowInAuthorsDataGrid.id\r\n        },\r\n        onCompleted: (update_author_data) => {\r\n            if (update_author_data.updateQuestionAuthor.errors.length === 0) {\r\n                refetch()\r\n                changeUpdateAuthorName('')\r\n                changeUserWantsToUpdateAuthor(false)\r\n            }\r\n        }\r\n    })\r\n\r\n    const [updateTheme, {data: update_theme_data}] = useMutation(UPDATE_THEME, {\r\n        variables: {\r\n            name: updateThemeName,\r\n            description: updateThemeDescription,\r\n            createdBy: 0,\r\n            id: selectedRowInThemesDataGrid.id\r\n        },\r\n        onCompleted: (update_theme_data) => {\r\n            if (update_theme_data.updateQuestionThemes.errors.length === 0) {\r\n                changeUpdateThemeName('')\r\n                changeUpdateThemeDescription('')\r\n                changeUserWantsToUpdateTheme(false)\r\n                refetch()\r\n            }\r\n        }\r\n    })\r\n    const [userWantsToCreateANewQuestion, changeUserWantsToCreateANewQuestion] = useState(false);\r\n    const [userWantsToCreateANewTheme, changeUserWantsToCreateANewTheme] = useState(false);\r\n    const [userWantToCreateANewAuthor, changeUserWantToCreateANewAuthor] = useState(false);\r\n    const [userWantsToUpdateAuthor, changeUserWantsToUpdateAuthor] = useState(false);\r\n    const [userWantsToUpdateTheme, changeUserWantsToUpdateTheme] = useState(false);\r\n    const [open, setOpen] = React.useState(false); // для оповещения о создание вопроса\r\n    const [openThemeNotification, setOpenThemeNotification] = React.useState(false)\r\n    const [openAuthorNotification, setOpenAuthorNotification] = React.useState(false)\r\n    // const [selectedRow, changeSelectedRow] = useState()\r\n    const classes = useStyles();\r\n\r\n    // console.log(selectedRowInQuestionDataGrid)\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            setOpen(false)\r\n        }\r\n    }\r\n    const themeNotificationHandleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            setOpenThemeNotification(false)\r\n        }\r\n    }\r\n    const authorNotificationHandleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            setOpenAuthorNotification(false)\r\n        }\r\n    }\r\n\r\n    const urlHandleChange = (event: any) => {\r\n        changeQuestionUrl(event.target.value);\r\n    };\r\n    const textHandleChange = (event: any) => {\r\n        changeQuestionText(event.target.value);\r\n    };\r\n    const authorIdHandleChange = (event: any) => {\r\n        setAuthorId(event.target.value);\r\n    };\r\n    const themesIdHandleChange = (event: any) => {\r\n        setQuestionThemesId(event.target.value);\r\n    };\r\n    const newThemeNameHandleChange = (event: any) => {\r\n        changeNewThemeName(event.target.value)\r\n    }\r\n    const newThemeDescriptionHandleChange = (event: any) => {\r\n        changeNewThemeDescription(event.target.value)\r\n    }\r\n    const newAuthorNameHandleChange = (event: any) => {\r\n        changeNewAuthorName(event.target.value)\r\n    }\r\n\r\n    const createQuestionFunction = () => {\r\n        if (mutation_data.createQuestion.errors.length === 0) {\r\n            return (<></>)\r\n        } else if (mutation_data.createQuestion.errors[0].field === 'theme') {\r\n            return (\r\n                <Alert severity=\"error\">Ошибка в поле темы вопроса, скорее всего вы его оставили пустым</Alert>\r\n            )\r\n        } else if (mutation_data.createQuestion.errors[0].field === 'author') {\r\n            return (\r\n                <Alert severity=\"error\">Ошибка в поле автора вопроса, скорее всего вы его оставили пустым</Alert>\r\n            )\r\n        } else if (mutation_data.createQuestion.errors[0].field === 'text') {\r\n            return (\r\n                <Alert severity=\"error\">Ошибка в поле текста вопроса, скорее всего вы его оставили пустым</Alert>\r\n            )\r\n        } else if (mutation_data.createQuestion.errors[0].field === \"video_url\") {\r\n            return (\r\n                <Alert severity=\"error\">Ошибка в поле ссылки на видео-вопрос</Alert>\r\n            )\r\n        } else {\r\n            return (\r\n                <Alert severity=\"error\">Неизвестная ошибка</Alert>\r\n            )\r\n        }\r\n    }\r\n\r\n    const createThemeFunction = () => {\r\n        if (create_theme_data.createQuestionThemes.errors.length === 0) {\r\n            return (<></>)\r\n        } else if (create_theme_data.createQuestionThemes.errors[0].field === \"name\") {\r\n            console.log(create_theme_data.createQuestionThemes.errors)\r\n            return <Alert severity='error'>Ошибка в название темы</Alert>\r\n        } else if (create_theme_data.createQuestionThemes.errors[0].field === \"description\") {\r\n            return <Alert severity='error'>Ошибка в описание темы, скорее всего вы его оставили пустым</Alert>\r\n        }\r\n    }\r\n\r\n    const createAuthorFunction = () => {\r\n        // console.log(create_author_data)\r\n        if (create_author_data.createQuestionAuthor.errors.length === 0) {\r\n            return <></>\r\n        } else {\r\n            return <Alert severity='error'>Ошибка в имени автора вопроса, скорее всего вы его оставили пустым</Alert>\r\n        }\r\n    }\r\n\r\n    const updateAuthorFunction = () => {\r\n        if (update_author_data.updateQuestionAuthor.errors.length === 0) {\r\n            return <></>\r\n        } else {\r\n            return <Alert severity='error'>Ошибка в имени автора вопроса, скорее всего вы его оставили пустым</Alert>\r\n        }\r\n    }\r\n\r\n    if (!data) {\r\n        return (\r\n            <Spinner animation=\"border\" variant=\"success\" className=\" offset-6 mt-5\"/>\r\n        )\r\n    }\r\n    const updateThemeFunction = () => {\r\n        if (update_theme_data.updateQuestionThemes.errors.length === 0) {\r\n            return <></>\r\n        } else if (update_theme_data.updateQuestionThemes.errors[0].field === \"name\") {\r\n            return <Alert severity='error'>Ошибка в название темы, скорее всего вы его оставили пустым</Alert>\r\n        } else if (update_theme_data.updateQuestionThemes.errors[0].field === \"description\") {\r\n            return <Alert severity='error'>Ошибка в описание темы, скорее всего вы его оставили пустым</Alert>\r\n        }\r\n    }\r\n\r\n\r\n    if (mutation_data) {\r\n        if (mutation_data.createQuestion.errors.length === 0) {\r\n            if (oneTimeChecked) {\r\n                setQuestionThemesId([])\r\n                setAuthorId([])\r\n                changeQuestionText('')\r\n                changeQuestionUrl('')\r\n                refetch()\r\n                setOpen(true)\r\n                changeUserWantsToCreateANewQuestion(false)\r\n                changeOneTimeChecked(false)\r\n            }\r\n        }\r\n    }\r\n    if (create_theme_data) {\r\n        if (create_theme_data.createQuestionThemes.errors.length === 0) {\r\n            if (oneTimeCheckedNewTheme) {\r\n                changeNewThemeName('')\r\n                changeNewThemeDescription('')\r\n                refetch()\r\n                changeUserWantsToCreateANewTheme(false)\r\n                changeOneTimeCheckedNewTheme(false)\r\n                setOpenThemeNotification(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    if (create_author_data) {\r\n        if (create_author_data.createQuestionAuthor.errors.length === 0) {\r\n            if (oneTimeCheckedNewAuthor) {\r\n                changeNewAuthorName('')\r\n                refetch()\r\n                changeUserWantToCreateANewAuthor(false)\r\n                changeOneTimeCheckedNewAuthor(false)\r\n                setOpenAuthorNotification(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"mr-4 ml-4\">\r\n            <div className=\"display-4 text-center mt-4\" style={{fontSize: '33px'}}>Создать вопрос</div>\r\n            <div className=\"mr-3 ml-3 mt-3\">\r\n                {memedCreateDataGrid}\r\n            </div>\r\n            <div className=\"offset-9 offset-lg-11\">\r\n                <Tooltip title=\"Создать вопрос\" aria-label=\"add\">\r\n                    <Fab color=\"primary\" className={classes.fab}\r\n                         onClick={() => {\r\n                             changeUserWantsToCreateANewQuestion(!userWantsToCreateANewQuestion)\r\n                         }}>\r\n                    <AddIcon/>\r\n                    </Fab>\r\n                </Tooltip>\r\n            </div>\r\n\r\n            {userWantsToCreateANewQuestion ?\r\n                <div>\r\n                    <div className=\"display-4 text-center mt-3\" style={{fontSize: '35px'}}>Создать новый вопрос</div>\r\n                    <Row>\r\n                        <Col className=\"col-md-6 col-11  ml-5\">\r\n                            <div>\r\n                                <TextField\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Текст вопроса\"\r\n                                    multiline\r\n                                    fullWidth\r\n                                    rowsMax={4}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={questionText}\r\n                                    onChange={textHandleChange}\r\n                                />\r\n                                <FormControl className=\"col-12\">\r\n                                    <TextField\r\n                                        id=\"standard-basic\"\r\n                                        label=\"Ссылка на видео-вопрос\"\r\n                                        value={questionUrl}\r\n                                        onChange={urlHandleChange}/>\r\n                                </FormControl>\r\n                            </div>\r\n                        </Col>\r\n                        <Col className=\"col-md-4  col-10 offset-md-1\">\r\n                            <div>\r\n                                <FormControl className=\"col-12 ml-5\">\r\n                                    <InputLabel id=\"question-theme-multiple\">Темы вопросов</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-mutiple-name-label\"\r\n                                        id=\"demo-mutiple-name\"\r\n                                        multiple\r\n                                        value={questionThemesId}\r\n                                        onChange={themesIdHandleChange}\r\n                                        input={<Input/>}\r\n                                        MenuProps={MenuProps}\r\n                                    >\r\n                                        {data.questionThemes.map((theme: any) => (\r\n                                            <MenuItem key={theme.name + theme.id} value={theme.id}>\r\n                                                {theme.name}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <FormControl className='col-12 ml-5'>\r\n                                    <InputLabel id=\"question-author-multiple\">Авторы вопросов</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-mutiple-name-label\"\r\n                                        id=\"demo-mutiple-name\"\r\n                                        multiple\r\n                                        value={authorId}\r\n                                        onChange={authorIdHandleChange}\r\n                                        input={<Input/>}\r\n                                        MenuProps={MenuProps}\r\n                                    >\r\n                                        {data.me.questionauthorSet.map((author: any) => (\r\n                                            <MenuItem key={author.name + author.id} value={author.id}>\r\n                                                {author.name}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <Row className=\"ml-1\">\r\n                                    <Button variant=\"outlined\" color=\"primary\"\r\n                                            className=\"mt-2   justify-content-end ml-5\"\r\n                                            onClick={(event) => {\r\n                                                event.preventDefault();\r\n                                                createQuestion()\r\n                                                changeOneTimeChecked(true)\r\n                                            }}>\r\n                                        Создать вопрос\r\n                                    </Button>\r\n                                    {mutation_data ? createQuestionFunction() : null}\r\n                                </Row>\r\n\r\n                                {/*{console.log(mutation_data)}*/}\r\n                                {/*{console.log(mutation_error)}*/}\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div> :\r\n                null}\r\n            <Row className=\"mt-3 mr-2 ml-2\">\r\n                <Col className=\"col-lg-4 col-12\">\r\n                    <div>\r\n                        {memedCreateThemesDataGrid}\r\n                        <div className=\"offset-9\">\r\n                            <Row>\r\n                                <Col className=\"col-4\">\r\n                                    <Tooltip title=\"Создать тему\" aria-label=\"add\">\r\n                                        <Fab color=\"primary\" className={classes.fab}\r\n                                             onClick={() => {\r\n                                                 changeUserWantsToCreateANewTheme(!userWantsToCreateANewTheme)\r\n                                             }}>\r\n\r\n                                            <AddIcon/>\r\n                                        </Fab>\r\n                                    </Tooltip>\r\n                                </Col>\r\n                                <Col className=\"col-3 ml-2\">\r\n                                    <Tooltip title=\"Редактировать тему вопросов\" aria-label=\"add\">\r\n                                        <Fab color=\"primary\" className={classes.fab}\r\n                                             onClick={() => {\r\n                                                 changeUserWantsToUpdateTheme(!userWantsToUpdateTheme)\r\n                                             }}>\r\n                                            <SettingsIcon/>\r\n                                        </Fab>\r\n                                    </Tooltip>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                        {userWantsToCreateANewTheme ? <div className=\"col-11 \">\r\n                            <TextField\r\n                                id=\"standard-multiline-flexible\"\r\n                                label=\"Название новой темы вопроса\"\r\n                                multiline\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                // style={{width: \"50vw\"}}\r\n                                value={newThemeName}\r\n                                onChange={(e) => {\r\n                                    changeNewThemeName(e.target.value)\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                id=\"standard-multiline-flexible\"\r\n                                label=\"Описание новой темы вопроса\"\r\n                                multiline\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                // style={{width: \"50vw\"}}\r\n                                value={newThemeDescription}\r\n                                onChange={(e) => {\r\n                                    changeNewThemeDescription(e.target.value)\r\n                                }}\r\n                            />\r\n                            <Button variant=\"outlined\" color=\"primary\" className=\"mt-2   justify-content-end\"\r\n                                    onClick={(event) => {\r\n                                        event.preventDefault();\r\n                                        changeOneTimeCheckedNewTheme(true);\r\n                                        refetch();\r\n                                        createTheme();\r\n                                    }}>\r\n                                Создать тему вопроса\r\n                            </Button>\r\n                            {create_theme_data ? createThemeFunction() : null}\r\n                        </div> : null}\r\n                        {userWantsToUpdateTheme && selectedRowInThemesDataGrid.id !== -10 ? <div>\r\n                            <TextField\r\n                                id=\"standard-multiline-flexible\"\r\n                                label=\"Обновленное название темы вопроса\"\r\n                                multiline\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                // style={{width: \"50vw\"}}\r\n                                value={updateThemeName}\r\n                                onChange={(e) => {\r\n                                    changeUpdateThemeName(e.target.value)\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                id=\"standard-multiline-flexible\"\r\n                                label=\"Описание обновленной темы вопроса\"\r\n                                multiline\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                // style={{width: \"50vw\"}}\r\n                                value={updateThemeDescription}\r\n                                onChange={(e) => {\r\n                                    changeUpdateThemeDescription(e.target.value)\r\n                                }}\r\n                            />\r\n                            <Button variant=\"outlined\" color=\"primary\" className=\"mt-2   justify-content-end\"\r\n                                    onClick={(event) => {\r\n                                        event.preventDefault();\r\n                                        updateTheme()\r\n                                        // changeOneTimeChecked(true)\r\n                                        changeOneTimeCheckedNewTheme(true)\r\n                                    }}>\r\n                                Обновить тему вопроса\r\n                            </Button>\r\n                            {console.log(update_theme_data)}\r\n                            {update_theme_data ? updateThemeFunction() : null}\r\n                        </div> : null}\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"col-lg-4 col-12 offset-lg-4 mt-3\">\r\n                    <div>\r\n                        {memedCreateAuthorsDataGrid}\r\n                        <div className=\"offset-9\">\r\n                            <Row>\r\n                                <Col className=\"col-4\">\r\n                                    <Tooltip title=\"Создать автора вопроса\" aria-label=\"add\">\r\n                                        <Fab color=\"primary\" className={classes.fab}\r\n                                             onClick={() => {\r\n                                                 changeUserWantToCreateANewAuthor(!userWantToCreateANewAuthor)\r\n                                             }}>\r\n\r\n                                            <AddIcon/>\r\n                                            {/*{console.log(data)}*/}\r\n                                        </Fab>\r\n                                    </Tooltip>\r\n                                </Col>\r\n                                <Col className=\"col-3 ml-2\">\r\n                                    <Tooltip title=\"Редактировать автора вопроса\" aria-label=\"add\">\r\n                                        <Fab color=\"primary\" className={classes.fab}\r\n                                             onClick={() => {\r\n                                                 changeUserWantsToUpdateAuthor(!userWantsToUpdateAuthor)\r\n                                             }}>\r\n                                            <SettingsIcon/>\r\n                                        </Fab>\r\n                                    </Tooltip>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                        {/*{console.log(userWantsToUpdateAuthor)}*/}\r\n                        {userWantToCreateANewAuthor ? <div className=\"col-11 \">\r\n                            <TextField\r\n                                id=\"standard-multiline-flexible\"\r\n                                label=\"Имя нового автора вопроса\"\r\n                                multiline\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                // style={{width: \"50vw\"}}\r\n                                value={newAuthorName}\r\n                                onChange={newAuthorNameHandleChange}\r\n                            />\r\n                            {/*{console.log(newAuthorName)}*/}\r\n                            <Button variant=\"outlined\" color=\"primary\" className=\"mt-2   justify-content-end\"\r\n                                    onClick={(event) => {\r\n                                        event.preventDefault();\r\n                                        // createTheme()\r\n                                        // changeOneTimeChecked(true)\r\n                                        createAuthor()\r\n                                        changeOneTimeCheckedNewAuthor(true)\r\n                                        changeOneTimeCheckedNewTheme(true)\r\n                                    }}>\r\n                                Создать нового автора вопроса\r\n                            </Button>\r\n                            {create_author_data ? createAuthorFunction() : null}\r\n                        </div> : null}\r\n\r\n\r\n                        {/*{console.log(updateAuthorName)}*/}\r\n                        {userWantsToUpdateAuthor && selectedRowInAuthorsDataGrid.id !== -10 ? <div>\r\n                            <TextField\r\n                                id=\"standard-multiline-flexible\"\r\n                                label=\"Новое имя автора вопроса\"\r\n                                multiline\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                // style={{width: \"50vw\"}}\r\n                                value={updateAuthorName}\r\n                                onChange={(e) => {\r\n                                    changeUpdateAuthorName(e.target.value)\r\n                                }}\r\n                            />\r\n                            <Button variant=\"outlined\" color=\"primary\" className=\"mt-2   justify-content-end\"\r\n                                    onClick={(event) => {\r\n                                        event.preventDefault();\r\n                                        updateAuthor()\r\n                                    }}>\r\n                                Обновить автора вопроса\r\n                            </Button>\r\n                        </div> : null}\r\n                        {update_author_data ? updateAuthorFunction() : null}\r\n                        {/*{console.log(update_author_data)}*/}\r\n\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    Вопрос успешно создан\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={openThemeNotification} autoHideDuration={6000} onClose={themeNotificationHandleClose}>\r\n                <Alert onClose={themeNotificationHandleClose} severity=\"success\">\r\n                    Тема вопроса успешно создана\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={openAuthorNotification} autoHideDuration={6000} onClose={authorNotificationHandleClose}>\r\n                <Alert onClose={authorNotificationHandleClose} severity=\"success\">\r\n                    Автор вопроса успешно создана\r\n                </Alert>\r\n            </Snackbar>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n        </div>)\r\n}\r\n","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\Registration.tsx",["134"],"import * as React from 'react'\r\nimport {Alert, Button, Container, Form} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport {gql, useMutation} from \"@apollo/client\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst REGISTRATION_MUTATION = gql`\r\nmutation REGISTER($email: String!, $password1: String!, $password2: String!, $username: String!){\r\n  register(email: $email, password1: $password1, password2: $password2, username: $username){\r\n    success\r\n    errors\r\n    refreshToken\r\n    token\r\n  }\r\n}`\r\nexport default function Registration(){\r\n    const [mail, changeMail] = useState('')\r\n    const [userName, changeUserName] = useState('')\r\n    const [password1, changePassword1] = useState('')\r\n    const [password2, changePassword2] = useState('')\r\n    const history = useHistory();\r\n\r\n    const [registration, { data, error }] = useMutation(REGISTRATION_MUTATION, {\r\n        variables: {\r\n            email: mail,\r\n            password1: password1,\r\n            password2: password2,\r\n            username: userName\r\n        }\r\n    })\r\n    const saveData = () =>{\r\n        localStorage.setItem('token', data.register.token)\r\n        localStorage.setItem('refreshToken', data.register.refreshToken)\r\n        localStorage.setItem('is_login', 'true')\r\n        setTimeout(()=>{\r\n            window.location.reload(false);\r\n        }, 500)\r\n    }\r\n    {data?.register.success ?  data?.register.success === true? saveData(): null: null}\r\n    {localStorage.getItem('is_login') === 'true' ? setTimeout(history.push, 1000, '/'): null}\r\n    {data ? console.log(data): null}\r\n    {error ? console.log(error): null}\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <div className=\"display-4 text-center mt-5\" style={{fontSize: '33px'}}>Регистрация</div>\r\n                <div className=\"col-4 offset-4 mt-3\">\r\n                    {/*<Card>*/}\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Label>Введите имя пользователя</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Имя пользователя\" value={userName} onChange={(event) =>{changeUserName(event.target.value)}}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Введите ваш email</Form.Label>\r\n                            <Form.Control type=\"email\" placeholder=\"email\" value={mail} onChange={(event) =>{changeMail(event.target.value)}}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Введите пароль</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Пароль\" value={password1} onChange={(event) =>{changePassword1(event.target.value)}}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Повторно введите пароль</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Пароль\" value={password2} onChange={(event) =>{changePassword2(event.target.value)}}/>\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\" className=\"mr-auto\" size=\"lg\" block onClick={(event => {event.preventDefault(); registration()})}>\r\n                            Зарегистрироваться\r\n                        </Button>\r\n                        { data?.register.errors.email ? data?.register.errors.email[0].message === \"A user with that email already exists.\" ?\r\n                            <Alert variant='danger' className=\"mt-2\" >Этот email уже был использован</Alert>: null: null}\r\n                        { data?.register.errors.username ? data?.register.errors.username[0].message === \"Enter a valid username. This value may contain only letters, numbers, and @/./+/-/_ characters.\" ?\r\n                            <Alert variant='danger' className=\"mt-2\" >Имя пользователя может содержать только буквы, цифры и символы @/./+/-/_</Alert>: null: null}\r\n                        { data?.register.errors.username ? data?.register.errors.username[0].message === \"A user with that username already exists.\" ?\r\n                            <Alert variant='danger' className=\"mt-2\" >Пользователь с таким именем уже создан</Alert>: null: null}\r\n                        { data?.register.errors.password2 ? data?.register.errors.password2[0].message === \"The two password fields didn’t match.\" ?\r\n                            <Alert variant='danger' className=\"mt-2\" >Пароли не совпадают</Alert>: null: null}\r\n                        { data?.register.errors.password2 ? (data?.register.errors.password2[0].message === \"This password is too short. It must contain at least 8 characters.\") ||\r\n                        (data?.register.errors.password2[0].message === \"This password is too common.\") ||\r\n                        (data?.register.errors.password2[0].message === \"This password is entirely numeric.\")?\r\n                            <Alert variant='danger' className=\"mt-2\" >Пароль слишком простой</Alert>: null: null}\r\n\r\n                        {data?.register.success ?  data?.register.success === true? <Alert variant='primary' className=\"mt-2\">Вы зарегистрировались, запрос на подтверждение аккаунта отправлен вам на почту</Alert>: null: null}\r\n\r\n                    </Form>\r\n                    {/*</Card>*/}\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\UpdateQuestion.tsx",["135","136","137","138","139","140","141","142","143","144"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\MainEditor.tsx",["145","146","147","148"],"import React, {useMemo, useState} from \"react\";\r\nimport {BottomNavigation} from \"@material-ui/core\";\r\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\r\nimport {AddIcon} from \"@material-ui/data-grid\";\r\nimport {ViewList} from \"@material-ui/icons\";\r\nimport CreatePoint from \"./CreatePoint\";\r\nimport UpdateQuestion from \"./UpdateQuestion\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\r\nimport {gql, useQuery} from \"@apollo/client\";\r\nimport {Spinner} from \"react-bootstrap\";\r\n\r\nconst CHECK_USER_LEVEL = gql`\r\nquery CHECK_USER_LEVEL{\r\n      me{\r\n        id\r\n        isStaff\r\n        userAccessLevel\r\n      }\r\n    }`\r\n\r\n\r\nexport default function MainEditor(){\r\n    const [value, setValue] = React.useState(0);\r\n    const {data: check_level_data, error: check_error} = useQuery(CHECK_USER_LEVEL,{\r\n        pollInterval: 10000\r\n    })\r\n    if (!check_level_data){\r\n        return(\r\n            <Spinner animation=\"border\" variant=\"success\" className=\" offset-6 mt-5\"/>\r\n        )\r\n    }\r\n    if (check_level_data.me.userAccessLevel !== \"ADMIN\" && check_level_data.me.userAccessLevel !== \"TEACHER\"){\r\n        return (\r\n            <Alert severity=\"error\">\r\n                <AlertTitle>Доступ ограничен</AlertTitle>\r\n                Вы не обладаете достаточными правами, чтобы просматривать этот раздел, для дополнитльной информации обратитесь к администрации\r\n            </Alert>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n        <BottomNavigation\r\n            value={value}\r\n            onChange={(event, newValue) => {\r\n                setValue(newValue);\r\n            }}\r\n            showLabels\r\n            className=\"col-12\"\r\n        >\r\n            <BottomNavigationAction label=\"Создание вопроса\" icon={ <AddIcon />} />\r\n            <BottomNavigationAction label=\"Редактор вопроса\" icon={<ViewList />} />\r\n        </BottomNavigation>\r\n        {value === 0 ? <CreatePoint/>: <UpdateQuestion/>}\r\n        </div>\r\n    );\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTest\\MainUserTest.tsx",["149","150","151","152","153","154","155","156","157"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\CreateUserTest.jsx",["158","159","160","161","162","163","164","165"],"import React from \"react\";\r\nimport {Button, Form, Jumbotron, Row, Spinner, Container} from \"react-bootstrap\";\r\n\r\n\r\nexport class CreateUserTest extends React.Component{\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.addQuestion = this.addQuestion.bind(this);\r\n        this.addAnswer = this.addAnswer.bind(this);\r\n        this.saveData = this.saveData.bind(this);\r\n        this.autoSaveData = this.autoSaveData.bind(this);\r\n        this.state = {\r\n            items: [],\r\n            isLoaded: false,\r\n            autoSave: false,\r\n        }\r\n\r\n        setInterval(this.autoSaveData, 10000)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://iot-show-version.herokuapp.com/api/test/25')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    userTest: json[0],\r\n                    isLoaded: true,\r\n                })\r\n            }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    saveData(){\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify(this.state.userTest)\r\n            }\r\n            fetch('https://iot-show-version.herokuapp.com/api/test/update', requestOptions)\r\n            console.log(\"Saved\")\r\n    }\r\n    autoSaveData(){\r\n        if (this.state.autoSave === 'true') {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify(this.state.userTest)\r\n            }\r\n            fetch('https://iot-show-version.herokuapp.com/api/test/update', requestOptions)\r\n            console.log(\"Saved\")\r\n            console.log(this.state.autoSave)\r\n        }\r\n    }\r\n\r\n    addQuestion(){\r\n        // console.log(this.state.userTest)\r\n        let data = this.state.userTest\r\n        // data = JSON.parse(data)\r\n        const question = {\r\n            questionName: '',\r\n            questionCoasting: 0,\r\n            averageMark: 0,\r\n            questionTextV1: '',\r\n            questionTextV2: '',\r\n            questionTextV3: '',\r\n            answers:[{\r\n                isTrue: true,\r\n                missingCoast: 0,\r\n                answerAward: 0,\r\n                answerText: '',\r\n                helpTextLevelEasy: '',\r\n                helpTextLevelMedium: '',\r\n                helpTextLevelHard: ''\r\n            }]\r\n\r\n        }\r\n        data.questions.push(question)\r\n        this.setState({userTest: data})\r\n    }\r\n    addAnswer(questionId) {\r\n        let data = this.state.userTest\r\n        // console.log(data)\r\n        const answer = {\r\n            isTrue: true,\r\n            missingCoast: 0,\r\n            answerAward: 0,\r\n            answerText: '',\r\n            helpTextLevelEasy: '',\r\n            helpTextLevelMedium: '',\r\n            helpTextLevelHard: ''\r\n        }\r\n        data.questions[questionId].answers.push(answer)\r\n        this.setState({userTest: data})\r\n    }\r\n\r\n    render() {\r\n        const { isLoaded } = this.state;\r\n\r\n        if (!isLoaded)\r\n            return <div className=\"display-1 text-center\">Loading...;\r\n                <Spinner animation=\"grow\" variant=\"primary\" />\r\n            </div>\r\n        // console.log(userTest)\r\n\r\n        return (\r\n            <>\r\n\r\n                <div className=\"display-4 text-center \">Создание теста</div>\r\n                <Container>\r\n                <Row className=\"justify-content-center\">\r\n                <div className=\"blockquote ml-5 mt-5 \">Название теста</div>\r\n                    <Form className=\"ml-2 col-7 mt-5\">\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Control type=\"text\" placeholder=\"Введите название теста\"\r\n                                          value={this.state.userTest.testName}\r\n                                          onChange={ e =>{\r\n                                              let data = this.state.userTest\r\n                                              data.testName = e.target.value\r\n                                              // console.log(data)\r\n                                              this.setState({userTest: data})\r\n                                          }\r\n                                          }/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Row>\r\n                <div className=\"display-4 ml-4\">Вопросы:</div>\r\n                {/*Ниже код, который должен быть вынесен в отдельный компонент, в будующем эта часть должна быть полностью переписана*/}\r\n\r\n                {/*<TestQuestions questionArray={userTest[0].questions}/>*/}\r\n                    <Form className=\"ml-4\">\r\n                        <Form.Label>Включить авто сохранение</Form.Label>\r\n                        <Form.Control as=\"select\" className=\"col-6 col-md-3\"\r\n                                      value={this.state.autoSave}\r\n                                      onChange={e=>{this.setState({autoSave: e.target.value})}}>\r\n                            <option value={true}>Включен</option>\r\n                            <option value={false}>Выключен</option>\r\n                        </Form.Control>\r\n                    </Form>\r\n                {this.state.userTest.questions.map((question, questionIndex) =>\r\n                    <div key={questionIndex} className=\"mr-4\">\r\n                        <h3 className=\"ml-4\">Вопрос №{questionIndex}</h3>\r\n                        <Form className=\"ml-4 mr-4\">\r\n                            <Form.Label>Вставьте ссылку на видео-вопрос</Form.Label>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Control type=\"text\" placeholder=\"Вставьте ссылку на видео-вопрос\"\r\n                                              value={this.state.userTest.questions[questionIndex].questionVideoUrl}\r\n                                              onChange={e=>{\r\n                                                  let data = this.state.userTest\r\n                                                  let question = data.questions[questionIndex]\r\n                                                  question.questionVideoUrl = e.target.value\r\n                                                  data.questions[questionIndex] = question\r\n                                                  // console.log(this.state.userTest)\r\n                                                  this.setState({userTest: data})\r\n                                              }}/>\r\n                            </Form.Group>\r\n                            <Form.Label>Первая формулировка вопроса</Form.Label>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Control type=\"text\" placeholder=\"Введите первую формулировку вопроса\"\r\n                                value={this.state.userTest.questions[questionIndex].questionTextV1}\r\n                                              as=\"textarea\" rows={3}\r\n                                onChange={e=>{\r\n                                    let data = this.state.userTest\r\n                                    let question = data.questions[questionIndex]\r\n                                    question.questionTextV1 = e.target.value\r\n                                    data.questions[questionIndex] = question\r\n                                    // console.log(this.state.userTest)\r\n                                    this.setState({userTest: data})\r\n                                }}/>\r\n                            </Form.Group>\r\n                            <Form.Label>Вторая формулировка вопроса</Form.Label>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Control type=\"text\" placeholder=\"Введите вторую формулировку вопроса\"\r\n                                              value={this.state.userTest.questions[questionIndex].questionTextV2}\r\n                                              as=\"textarea\" rows={3}\r\n                                              onChange={e=>{\r\n                                                  let data = this.state.userTest\r\n                                                  let question = data.questions[questionIndex]\r\n                                                  question.questionTextV2 = e.target.value\r\n                                                  data.questions[questionIndex] = question\r\n                                                  // console.log(this.state.userTest)\r\n                                                  this.setState({userTest: data})\r\n                                              }}/>\r\n                            </Form.Group>\r\n                            <Form.Label>Третья формулировка вопроса</Form.Label>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Control type=\"text\" placeholder=\"Введите третью формулировку вопроса\"\r\n                                              value={this.state.userTest.questions[questionIndex].questionTextV3}\r\n                                              as=\"textarea\" rows={3}\r\n                                              onChange={e=>{\r\n                                                  let data = this.state.userTest\r\n                                                  let question = data.questions[questionIndex]\r\n                                                  question.questionTextV3 = e.target.value\r\n                                                  data.questions[questionIndex] = question\r\n                                                  // console.log(this.state.userTest)\r\n                                                  this.setState({userTest: data})\r\n                                              }}/>\r\n                            </Form.Group>\r\n                        </Form>\r\n                        {/*<QuestionAnswers answerArray={question.answers}/>*/}\r\n\r\n                        {this.state.userTest.questions[questionIndex].answers.map((answer, answerIndex) =>\r\n                            <div key={answerIndex}>\r\n\r\n                                <Jumbotron className=\"col-11 justify-content-center ml-5\">\r\n                                    <h4 className=\"ml-4\">Ответ №{answerIndex}</h4>\r\n                                    <Form className=\"mr-5 ml-4\">\r\n\r\n                                        <Form.Label>Ответ правильный/ошибочный</Form.Label>\r\n                                        <Form.Control as=\"select\" className=\"col-6 col-md-3\"\r\n                                                      value={this.state.userTest.questions[questionIndex].answers[answerIndex].isTrue}\r\n                                                      onChange={e=>{\r\n                                                          let data = this.state.userTest\r\n                                                          let question = data.questions[questionIndex]\r\n                                                          let answer = question.answers[answerIndex]\r\n                                                          answer.isTrue = e.target.value\r\n                                                          question.answers[answerIndex] = answer\r\n                                                          data.questions[questionIndex] = question\r\n                                                          // console.log(this.state.userTest)\r\n                                                          this.setState({userTest: data})\r\n                                                      }}>\r\n                                            <option value={true}>Правильный</option>\r\n                                            <option value={false}>Ошибочный</option>\r\n                                        </Form.Control>\r\n\r\n                                        <Form.Label className=\"mt-2\">Очередь проверки, чем меньше - тем раньше вопрос будет проверен</Form.Label>\r\n                                        <Form.Group>\r\n                                            <Form.Control  type=\"number\" placeholder=\"Ведите число, отражающее очередь проверки\" className=\"col-6 col-md-3\"\r\n                                                           value={this.state.userTest.questions[questionIndex].answers[answerIndex].missingCoast}\r\n\r\n                                                           onChange={e=>{\r\n                                                               let data = this.state.userTest\r\n                                                               let question = data.questions[questionIndex]\r\n                                                               let answer = question.answers[answerIndex]\r\n                                                               answer.missingCoast = e.target.value\r\n                                                               question.answers[answerIndex] = answer\r\n                                                               data.questions[questionIndex] = question\r\n                                                               // console.log(this.state.userTest)\r\n                                                               this.setState({userTest: data})\r\n                                                           }}/>\r\n                                        </Form.Group>\r\n                                        <Form.Label>Ссылка на видео-подсказку к ответу</Form.Label>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control type=\"text\" placeholder=\"Введите ссылку на видео-подсказку к ответу\"\r\n                                                          value={this.state.userTest.questions[questionIndex].answers[answerIndex].answerVideoUrl}\r\n                                                          onChange={e=>{\r\n                                                              let data = this.state.userTest\r\n                                                              let question = data.questions[questionIndex]\r\n                                                              let answer = question.answers[answerIndex]\r\n                                                              answer.answerVideoUrl = e.target.value\r\n                                                              question.answers[answerIndex] = answer\r\n                                                              data.questions[questionIndex] = question\r\n                                                              // console.log(this.state.userTest)\r\n                                                              this.setState({userTest: data})\r\n                                                          }}/>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Label>Формулировка ответа</Form.Label>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control type=\"text\" placeholder=\"Введите формулировку ответа\"\r\n                                                          value={this.state.userTest.questions[questionIndex].answers[answerIndex].answerText}\r\n                                                          as=\"textarea\" rows={3}\r\n                                                          onChange={e=>{\r\n                                                              let data = this.state.userTest\r\n                                                              let question = data.questions[questionIndex]\r\n                                                              let answer = question.answers[answerIndex]\r\n                                                              answer.answerText = e.target.value\r\n                                                              question.answers[answerIndex] = answer\r\n                                                              data.questions[questionIndex] = question\r\n                                                              // console.log(this.state.userTest)\r\n                                                              this.setState({userTest: data})\r\n                                                          }}/>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Label>Подсказка для упрощенного уровня</Form.Label>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control type=\"text\" placeholder=\"Введите подсказку для упрощенного уровня\"\r\n                                                          value={this.state.userTest.questions[questionIndex].answers[answerIndex].helpTextLevelEasy}\r\n                                                          as=\"textarea\" rows={3}\r\n                                                          onChange={e=>{\r\n                                                              let data = this.state.userTest\r\n                                                              let question = data.questions[questionIndex]\r\n                                                              let answer = question.answers[answerIndex]\r\n                                                              answer.helpTextLevelEasy = e.target.value\r\n                                                              question.answers[answerIndex] = answer\r\n                                                              data.questions[questionIndex] = question\r\n                                                              // console.log(this.state.userTest)\r\n                                                              this.setState({userTest: data})\r\n                                                          }}/>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Label>Подсказка для нормального уровня</Form.Label>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control type=\"text\" placeholder=\"Введите подсказку для нормального уровня\"\r\n                                                          value={this.state.userTest.questions[questionIndex].answers[answerIndex].helpTextLevelMedium}\r\n                                                          as=\"textarea\" rows={3}\r\n                                                          onChange={e=>{\r\n                                                              let data = this.state.userTest\r\n                                                              let question = data.questions[questionIndex]\r\n                                                              let answer = question.answers[answerIndex]\r\n                                                              answer.helpTextLevelMedium = e.target.value\r\n                                                              question.answers[answerIndex] = answer\r\n                                                              data.questions[questionIndex] = question\r\n                                                              // console.log(this.state.userTest)\r\n                                                              this.setState({userTest: data})\r\n                                                          }}/>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Label>Подсказка для усложненного уровня</Form.Label>\r\n                                        <Form.Group controlId=\"formBasicEmail\">\r\n                                            <Form.Control type=\"text\" placeholder=\"Введите подсказку для усложненного уровня\"\r\n                                                          value={this.state.userTest.questions[questionIndex].answers[answerIndex].helpTextLevelHard}\r\n                                                          as=\"textarea\" rows={3}\r\n                                                          onChange={e=>{\r\n                                                              let data = this.state.userTest\r\n                                                              let question = data.questions[questionIndex]\r\n                                                              let answer = question.answers[answerIndex]\r\n                                                              answer.helpTextLevelHard = e.target.value\r\n                                                              question.answers[answerIndex] = answer\r\n                                                              data.questions[questionIndex] = question\r\n                                                              // console.log(this.state.userTest)\r\n                                                              this.setState({userTest: data})\r\n                                                          }}/>\r\n                                        </Form.Group>\r\n                                        <Button onClick={this.saveData} className=\"ml-5\">Сохранить тест</Button>\r\n                                    </Form>\r\n                                </Jumbotron>\r\n                            </div>)}\r\n                    </div>\r\n                )}\r\n                {/*<Button onClick={this.addQuestion} className=\"ml-5 col-3  \">Добавить вопрос</Button>*/}\r\n                    <Button onClick={() =>this.addAnswer(0)} className=\"ml-5\">Добавить ответ</Button>\r\n                <br/>\r\n                {/*<Button onClick={this.saveData} className=\"ml-5\">Сохранить тест</Button>*/}\r\n                </Container>\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n}",[],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\search.tsx",["166"],"import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\n\r\nconst filter = createFilterOptions<FilmOptionType>();\r\n\r\nexport default function NavSearch() {\r\n    const [value, setValue] = React.useState<FilmOptionType | null>(null);\r\n\r\n    return (\r\n        <Autocomplete\r\n            size=\"small\"\r\n            value={value}\r\n            onChange={(event, newValue) => {\r\n                if (typeof newValue === 'string') {\r\n                    setValue({\r\n                        title: newValue,\r\n                    });\r\n                } else if (newValue && newValue.inputValue) {\r\n                    // Create a new value from the user input\r\n                    setValue({\r\n                        title: newValue.inputValue,\r\n                    });\r\n                } else {\r\n                    setValue(newValue);\r\n                }\r\n            }}\r\n            filterOptions={(options, params) => {\r\n                const filtered = filter(options, params);\r\n\r\n                // Suggest the creation of a new value\r\n                // if (params.inputValue !== '') {\r\n                //     filtered.push({\r\n                //         inputValue: params.inputValue,\r\n                //         title: `Add \"${params.inputValue}\"`,\r\n                //     });\r\n                // }\r\n\r\n                return filtered;\r\n            }}\r\n            selectOnFocus\r\n            clearOnBlur\r\n            handleHomeEndKeys\r\n            id=\"free-solo-with-text-demo\"\r\n            options={top100Films}\r\n            getOptionLabel={(option) => {\r\n                // Value selected with enter, right from the input\r\n                if (typeof option === 'string') {\r\n                    return option;\r\n                }\r\n                // Add \"xxx\" option created dynamically\r\n                if (option.inputValue) {\r\n                    return option.inputValue;\r\n                }\r\n                // Regular option\r\n                return option.title;\r\n            }}\r\n            renderOption={(option) => option.title}\r\n            \r\n            freeSolo\r\n            renderInput={(params) => (\r\n                <TextField {...params} label=\"Введите название карточки или темы\" variant=\"outlined\" />\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\ninterface FilmOptionType {\r\n    inputValue?: string;\r\n    title: string;\r\n    year?: number;\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films: FilmOptionType[] = [\r\n    // { title: 'The Shawshank Redemption', year: 1994 },\r\n    // { title: 'The Godfather', year: 1972 },\r\n    // { title: 'The Godfather: Part II', year: 1974 },\r\n    // { title: 'The Dark Knight', year: 2008 },\r\n    // { title: '12 Angry Men', year: 1957 },\r\n    // { title: \"Schindler's List\", year: 1993 },\r\n    // { title: 'Pulp Fiction', year: 1994 },\r\n    // { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n    // { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n    // { title: 'Fight Club', year: 1999 },\r\n    // { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n    // { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n    // { title: 'Forrest Gump', year: 1994 },\r\n    // { title: 'Inception', year: 2010 },\r\n    // { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n    // { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n    // { title: 'Goodfellas', year: 1990 },\r\n    // { title: 'The Matrix', year: 1999 },\r\n    // { title: 'Seven Samurai', year: 1954 },\r\n    // { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n    // { title: 'City of God', year: 2002 },\r\n    // { title: 'Se7en', year: 1995 },\r\n    // { title: 'The Silence of the Lambs', year: 1991 },\r\n    // { title: \"It's a Wonderful Life\", year: 1946 },\r\n    // { title: 'Life Is Beautiful', year: 1997 },\r\n    // { title: 'The Usual Suspects', year: 1995 },\r\n    // { title: 'Léon: The Professional', year: 1994 },\r\n    // { title: 'Spirited Away', year: 2001 },\r\n    // { title: 'Saving Private Ryan', year: 1998 },\r\n    // { title: 'Once Upon a Time in the West', year: 1968 },\r\n    // { title: 'American History X', year: 1998 },\r\n    // { title: 'Interstellar', year: 2014 },\r\n    // { title: 'Casablanca', year: 1942 },\r\n    // { title: 'City Lights', year: 1931 },\r\n    // { title: 'Psycho', year: 1960 },\r\n    // { title: 'The Green Mile', year: 1999 },\r\n    // { title: 'The Intouchables', year: 2011 },\r\n    // { title: 'Modern Times', year: 1936 },\r\n    // { title: 'Raiders of the Lost Ark', year: 1981 },\r\n    // { title: 'Rear Window', year: 1954 },\r\n    // { title: 'The Pianist', year: 2002 },\r\n    // { title: 'The Departed', year: 2006 },\r\n    // { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n    // { title: 'Back to the Future', year: 1985 },\r\n    // { title: 'Whiplash', year: 2014 },\r\n    // { title: 'Gladiator', year: 2000 },\r\n    // { title: 'Memento', year: 2000 },\r\n    // { title: 'The Prestige', year: 2006 },\r\n    // { title: 'The Lion King', year: 1994 },\r\n    // { title: 'Apocalypse Now', year: 1979 },\r\n    // { title: 'Alien', year: 1979 },\r\n    // { title: 'Sunset Boulevard', year: 1950 },\r\n    // {\r\n    //     title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    //     year: 1964,\r\n    // },\r\n    // { title: 'The Great Dictator', year: 1940 },\r\n    // { title: 'Cinema Paradiso', year: 1988 },\r\n    // { title: 'The Lives of Others', year: 2006 },\r\n    // { title: 'Grave of the Fireflies', year: 1988 },\r\n    // { title: 'Paths of Glory', year: 1957 },\r\n    // { title: 'Django Unchained', year: 2012 },\r\n    // { title: 'The Shining', year: 1980 },\r\n    // { title: 'WALL·E', year: 2008 },\r\n    // { title: 'American Beauty', year: 1999 },\r\n    // { title: 'The Dark Knight Rises', year: 2012 },\r\n    // { title: 'Princess Mononoke', year: 1997 },\r\n    // { title: 'Aliens', year: 1986 },\r\n    // { title: 'Oldboy', year: 2003 },\r\n    // { title: 'Once Upon a Time in America', year: 1984 },\r\n    // { title: 'Witness for the Prosecution', year: 1957 },\r\n    // { title: 'Das Boot', year: 1981 },\r\n    // { title: 'Citizen Kane', year: 1941 },\r\n    // { title: 'North by Northwest', year: 1959 },\r\n    // { title: 'Vertigo', year: 1958 },\r\n    // { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n    // { title: 'Reservoir Dogs', year: 1992 },\r\n    // { title: 'Braveheart', year: 1995 },\r\n    // { title: 'M', year: 1931 },\r\n    // { title: 'Requiem for a Dream', year: 2000 },\r\n    // { title: 'Amélie', year: 2001 },\r\n    // { title: 'A Clockwork Orange', year: 1971 },\r\n    // { title: 'Like Stars on Earth', year: 2007 },\r\n    // { title: 'Taxi Driver', year: 1976 },\r\n    // { title: 'Lawrence of Arabia', year: 1962 },\r\n    // { title: 'Double Indemnity', year: 1944 },\r\n    // { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n    // { title: 'Amadeus', year: 1984 },\r\n    // { title: 'To Kill a Mockingbird', year: 1962 },\r\n    // { title: 'Toy Story 3', year: 2010 },\r\n    // { title: 'Logan', year: 2017 },\r\n    // { title: 'Full Metal Jacket', year: 1987 },\r\n    // { title: 'Dangal', year: 2016 },\r\n    // { title: 'The Sting', year: 1973 },\r\n    // { title: '2001: A Space Odyssey', year: 1968 },\r\n    // { title: \"Singin' in the Rain\", year: 1952 },\r\n    // { title: 'Toy Story', year: 1995 },\r\n    // { title: 'Bicycle Thieves', year: 1948 },\r\n    // { title: 'The Kid', year: 1921 },\r\n    // { title: 'Inglourious Basterds', year: 2009 },\r\n    // { title: 'Snatch', year: 2000 },\r\n    // { title: '3 Idiots', year: 2009 },\r\n    // { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\AnswerNode.tsx",["167","168","169","170","171","172","173","174","175","176"],"import React, {useEffect, useMemo, useState} from \"react\";\r\nimport {Col, Form, Row} from \"react-bootstrap\";\r\nimport {Collapse, Fade, InputLabel, Select, Snackbar, Switch, TextField} from \"@material-ui/core\";\r\nimport {any, number} from \"prop-types\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport { MenuItem } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {gql, useMutation} from \"@apollo/client\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {assertDirective} from \"graphql\";\r\nimport Input from '@material-ui/core/Input';\r\n\r\nconst UPDATE_ANSWER = gql`mutation UPDATE_ANSWER($question: ID!, $id: ID, $isTrue: Boolean, $text: String, $helpTextv1: String,\r\n$helpTextv2: String, $helpTextv3: String, $videoUrl: String, $checkQueue: Int!, $hardLevelOfAnswer: String!){\r\n  updateAnswer(input: {createdBy: 0, question: $question, isTrue: $isTrue, text: $text, helpTextv1: $helpTextv1, \r\n  helpTextv2: $helpTextv2, helpTextv3: $helpTextv3, videoUrl: $videoUrl, checkQueue: $checkQueue, \r\n    hardLevelOfAnswer: $hardLevelOfAnswer, id: $id}){\r\n    errors{\r\n      field\r\n      messages\r\n    }\r\n  }\r\n}`\r\n\r\n\r\n\r\n\r\nexport default function AnswerNode(props: any) {\r\n    const [text, changeText] = useState(props.answer.text)\r\n    const [helpTextv1, changeHelpTextv1] = useState(props.answer.helpTextv1)\r\n    const [helpTextv2, changeHelpTextv2] = useState(props.answer.helpTextv2)\r\n    const [helpTextv3, changeHelpTextv3] = useState(props.answer.helpTextv3)\r\n    const [videoUrl, changeVideoUrl] = useState(props.answer.videoUrl)\r\n    const [hardLevelOfAnswer, changeHardLevelOfAnswer] = useState(props.answer.hardLevelOfAnswer)\r\n    const [isTrue, changeIsTrue] = useState(props.answer.isTrue)\r\n    const [checkQueue, changeCheckQueue] = useState(props.answer.checkQueue)\r\n    const [showPaper, changeShowPaper] = useState(false)\r\n    const[ showUpdateNotification, changeShowUpdateNotification] = useState(false)\r\n    const [answerImageName, setAnswerImageName] = useState('')\r\n    const [selectedAnswerImage, setSelectedAnswerImage] = useState<any>();\r\n    const [isSelectedAnswerImage, setIsSelectedAnswerImage] = useState(false);\r\n    const changeHandlerForAnswerImage = async (event) => {\r\n        if (event.target.files[0]){\r\n            await setSelectedAnswerImage(event.target.files[0]);\r\n            await setIsSelectedAnswerImage(true);\r\n            handleSubmissionAnswerImage(event.target.files[0])\r\n        }\r\n    };\r\n\r\n    const handleSubmissionAnswerImage = (img: any) => {\r\n        const formData = new FormData();\r\n\r\n        formData.append('image', img);\r\n        formData.append('owner_answer', props.answer.id);\r\n        fetch(\r\n            'https://iot-experemental.herokuapp.com/files/answer?update_id=' + props.answer.id,\r\n            {\r\n                method: 'POST',\r\n                body: formData,\r\n            }\r\n        )\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                console.log('Success:', result);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    };\r\n\r\n    const queueErrorProtect = () => {\r\n        if (checkQueue.length === 0) {\r\n            return 10\r\n        } else {\r\n            return checkQueue\r\n        }\r\n    };\r\n    const [update_answer, {data: update_answer_data, loading: update_answer_loading}] = useMutation(UPDATE_ANSWER, {\r\n        variables: {\r\n            question: props.questionID,\r\n            id: props.answer.id,\r\n            isTrue: (isTrue == 'true' || isTrue === true), // isTrue - строковая, потому что селект возвращает только строки\r\n            text: text,\r\n            helpTextv1: helpTextv1,\r\n            helpTextv2: helpTextv2,\r\n            helpTextv3: helpTextv3,\r\n            videoUrl: videoUrl,\r\n            checkQueue: queueErrorProtect(),\r\n            hardLevelOfAnswer: hardLevelOfAnswer,\r\n        },\r\n        onCompleted: (update_answer_data) =>{\r\n            if (update_answer_data.updateAnswer.errors.length === 0){\r\n                console.log(\"saved\")\r\n                changeShowUpdateNotification(true)\r\n            }\r\n        },\r\n        onError: error => {console.log(error)\r\n        // console.log(checkQueue)\r\n            }\r\n    })\r\n    useEffect(() =>{\r\n        async function getData(){\r\n            const img_data = await fetch(\"https://iot-experemental.herokuapp.com/files/answer?id=\"+ props.answer.id)\r\n            const img_data_json = await img_data.json()\r\n            if (img_data_json[0]){\r\n                setAnswerImageName(img_data_json[0].image.slice(68).split('?')[0])\r\n            }\r\n        }\r\n        getData();\r\n    }, [])\r\n    const changeTextHandle = (e: any) => {\r\n        changeText(e.target.value)\r\n    }\r\n    const updateAnswerNotificationHandleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            changeShowUpdateNotification(false)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"mr-2 ml-2 mt-3 \">\r\n            <Paper elevation={3} className=\"ml-5 mr-5\">\r\n                <br/>\r\n                <Typography variant=\"h6\" className=\"ml-5\" color=\"inherit\">{\"ID: \" + props.answer.id + \" \" + text}</Typography>\r\n                 <FormControlLabel\r\n                     control={<Switch checked={showPaper} onChange={() => changeShowPaper(!showPaper)} />}\r\n                     label=\"Редактировать\"\r\n                     className=\"ml-5\"\r\n                 />\r\n                <Collapse in={showPaper}>\r\n                    <div>\r\n                        <Row >\r\n                            <Col className=\"mr-5 ml-5 col-5 \" >\r\n                                <TextField\r\n                                    className=\"mt-2\"\r\n                                    key={props.answer.id + \"text\"}\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Текст ответа\"\r\n                                    multiline\r\n                                    fullWidth\r\n                                    rowsMax={7}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={text}\r\n                                    onChange={changeTextHandle}\r\n                                />\r\n                                <TextField\r\n                                    className=\"mt-2\"\r\n                                    key={props.answer.id + \"helpTextv1\"}\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Подсказка для легкого уровня сложности\"\r\n                                    multiline\r\n                                    fullWidth\r\n                                    rowsMax={7}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={helpTextv1}\r\n                                    onChange={(e: any) => {\r\n                                        changeHelpTextv1(e.target.value)\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                            <Col className=\"col-5 offset-1\">\r\n                                <TextField\r\n                                    className=\"mt-2\"\r\n                                    key={props.answer.id + \"helpTextv2\"}\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Подсказка для стандартного уровня сложности\"\r\n                                    multiline\r\n                                    fullWidth\r\n                                    rowsMax={7}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={helpTextv2}\r\n                                    onChange={(e: any) => {\r\n                                        changeHelpTextv2(e.target.value)\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    className=\"mt-2\"\r\n                                    key={props.answer.id + \"helpTextv3\"}\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Подсказка для усложненного уровня\"\r\n                                    multiline\r\n                                    fullWidth\r\n                                    rowsMax={7}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={helpTextv3}\r\n                                    onChange={(e: any) => {\r\n                                        changeHelpTextv3(e.target.value)\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Col className=\"mr-5 ml-5 col-5 mt-2\">\r\n                                <TextField\r\n                                    key={props.answer.id + \"videoUrl\"}\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Ссылка на видео-ответ\"\r\n                                    fullWidth\r\n                                    rowsMax={7}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={videoUrl}\r\n                                    onChange={(e: any) => {\r\n                                        changeVideoUrl(e.target.value)\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                            <Col className=\"col-1 offset-1 mt-2\">\r\n                                <FormControl style={{width: \"220px\"}}>\r\n                                    <InputLabel id=\"demo-simple-select-label\">Сложность ответа</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-label\"\r\n                                        id=\"demo-simple-select\"\r\n                                        value={hardLevelOfAnswer}\r\n                                        onChange={(e) =>{changeHardLevelOfAnswer(e.target.value)}}\r\n                                    >\r\n                                        <MenuItem value=\"EASY\">Очевидный</MenuItem>\r\n                                        <MenuItem value=\"MEDIUM\">Нормальный</MenuItem>\r\n                                        <MenuItem value=\"HARD\">Каверзный</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Col>\r\n                            <Col className=\"col-1 offset-1 mt-2\">\r\n                                <FormControl style={{width: \"220px\"}}>\r\n                                    <InputLabel id=\"demo-simple-select-label\">Ответ верный/неверный</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-label\"\r\n                                        id=\"demo-simple-select\"\r\n                                        value={isTrue}\r\n                                        onChange={(e) =>{changeIsTrue(e.target.value)}}\r\n                                    >\r\n                                        <MenuItem value=\"true\">Верный</MenuItem>\r\n                                        <MenuItem value=\"false\">Неверный</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Col>\r\n                            <Col className=\"col-1 offset-1  mr-5 mt-3\">\r\n                                <FormControl>\r\n                                    <InputLabel htmlFor=\"formatted-text-mask-input\">Очередь проверки</InputLabel>\r\n                                    <Input\r\n\r\n                                        value={checkQueue}\r\n                                        onChange={(e) => {\r\n                                            const valueWithOnlyNumber = e.target.value.replace(/[^\\d]/g, '')\r\n                                            changeCheckQueue(valueWithOnlyNumber)\r\n                                        }}\r\n                                        name=\"textmask\"\r\n                                        id=\"formatted-text-mask-input\"\r\n\r\n                                    />\r\n                                </FormControl>\r\n                            </Col>\r\n                            <Col className=\"mr-5 ml-5 col-5 mt-2\">\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    variant=\"outlined\"\r\n                                    component=\"label\"\r\n                                >\r\n                                    <input type=\"file\"  hidden name=\"file\" onChange={changeHandlerForAnswerImage} />\r\n                                    Изображение для ответа\r\n                                </Button>\r\n                                {isSelectedAnswerImage ? (\r\n                                    <div>\r\n\r\n                                         {selectedAnswerImage?.name}\r\n                                    </div>\r\n                                ) : null}\r\n                                {answerImageName && !isSelectedAnswerImage? <div>{answerImageName}</div>: null}\r\n                            </Col>\r\n                            <Col className=\"col-1 offset-1 ml-auto mr-5 mt-3\">\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => {update_answer()}}>\r\n                                    Сохранить\r\n                                </Button>\r\n                            </Col>\r\n                            {update_answer_data? update_answer_data.updateAnswer.errors.length !== 0?\r\n                                <Alert severity='error'>Ошибка при сохранение ответа</Alert>: null :null}\r\n                        </Row>\r\n                    </div>\r\n                </Collapse>\r\n                <Snackbar open={showUpdateNotification} autoHideDuration={6000} onClose={updateAnswerNotificationHandleClose}>\r\n                    <Alert onClose={updateAnswerNotificationHandleClose} severity=\"success\">\r\n                        Содержание ответа обновлено\r\n                    </Alert>\r\n                </Snackbar>\r\n                <br/>\r\n                <br/>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\ShowErrorsOnScreen.jsx",["177","178","179"],"import React from \"react\";\r\nimport PropTypes, {bool} from \"prop-types\";\r\nimport ReactPlayer from \"react-player\";\r\nimport {Accordion, Alert, Button, Card} from \"react-bootstrap\";\r\n\r\nexport class ShowErrorsOnScreen extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        if(this.props.errorArray.length === 0 && !this.props.oneTimeErrorCheck)\r\n            return <div></div>\r\n        if(this.props.errorArray.length === 0 && this.props.oneTimeErrorCheck) {\r\n            console.log(this.props.errorArray)\r\n            return <Alert className=\"display-3 text-center mt-2\" variant=\"primary\">Поздравляем, вы прошли тест!</Alert>\r\n        }\r\n        if ((this.props.HelpLevel === '0') && this.props.showHelpVideo)\r\n        return(\r\n            <>\r\n            <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">\r\n                {this.props.answers[this.props.errorArray[0]].helpTextv1}\r\n                {/*<ReactPlayer url={this.props.answers[this.props.errorArray[0]].answerVideoUrl}/>*/}\r\n                <Accordion >\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Отобразить видео подсказку\r\n                                {console.log(\" \")}\r\n                            </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <ReactPlayer url={this.props.answers[this.props.errorArray[0]].videoUrl} controls/>\r\n                        </Accordion.Collapse>\r\n                </Accordion>\r\n            </Alert>\r\n            </>\r\n        )\r\n        if ((this.props.HelpLevel === '0'))\r\n            return(\r\n                <>\r\n                    <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">{this.props.answers[this.props.errorArray[0]].helpTextv1}</Alert>\r\n                </>\r\n            )\r\n\r\n        if (this.props.HelpLevel === '1' && this.props.showHelpVideo)\r\n            return(\r\n                <>\r\n                    {/*<Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4\">{this.props.answers[this.props.errorArray[0]].helpTextLevelMedium}</Alert>*/}\r\n                    {/*<ReactPlayer url={this.props.answers[this.props.errorArray[0]].answerVideoUrl}/>*/}\r\n                    <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">\r\n                        {this.props.answers[this.props.errorArray[0]].helpTextv2}\r\n                        {/*<ReactPlayer url={this.props.answers[this.props.errorArray[0]].answerVideoUrl}/>*/}\r\n                        <Accordion >\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Отобразить видео подсказку\r\n                                {console.log(\" \")}\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <ReactPlayer url={this.props.answers[this.props.errorArray[0]].videoUrl} controls/>\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                    </Alert>\r\n                </>\r\n            )\r\n        if (this.props.HelpLevel === '1')\r\n            return(\r\n                <>\r\n                    <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">{this.props.answers[this.props.errorArray[0]].helpTextv2}</Alert>\r\n                </>\r\n            )\r\n\r\n        if (this.props.HelpLevel === '2' && this.props.showHelpVideo)\r\n            return(\r\n                <>\r\n                    {/*<Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4\">{this.props.answers[this.props.errorArray[0]].helpTextLevelHard}</Alert>*/}\r\n                    {/*<ReactPlayer url={this.props.answers[this.props.errorArray[0]].answerVideoUrl}/>*/}\r\n                    <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">\r\n                        {this.props.answers[this.props.errorArray[0]].helpTextv3}\r\n                        {/*<ReactPlayer url={this.props.answers[this.props.errorArray[0]].answerVideoUrl}/>*/}\r\n                        <Accordion >\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                Отобразить видео подсказку\r\n                                {console.log(\" \")}\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <ReactPlayer url={this.props.answers[this.props.errorArray[0]].videoUrl} controls/>\r\n                            </Accordion.Collapse>\r\n                        </Accordion>\r\n                    </Alert>\r\n                </>\r\n            )\r\n        if (this.props.HelpLevel === '2')\r\n            return(\r\n                <>\r\n                    <Alert variant=\"info\" style={{fontSize: '20px'}} className=\"display-4 mt-2\">{this.props.answers[this.props.errorArray[0]].helpTextv3}</Alert>\r\n                </>\r\n            )\r\n    }\r\n}\r\nShowErrorsOnScreen.propTypes = {\r\n    errorArray: PropTypes.array,\r\n    answers: PropTypes.array,\r\n    oneTimeErrorCheck: PropTypes.bool,\r\n    HelpLevel: PropTypes.string,\r\n    showHelpVideo: bool,\r\n};","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTest\\QuestionByID.tsx",["180","181","182","183","184","185","186","187","188","189"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\CKEditor.tsx",["190","191","192","193","194","195","196","197"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Button, Input} from \"@material-ui/core\";\r\nimport {Col, Row} from \"react-bootstrap\";\r\nexport default function CKEDITOR(props: any){\r\n    const [selectedAnswerImage, setSelectedAnswerImage] = useState<any>();\r\n    const [isSelectedAnswerImage, setIsSelectedAnswerImage] = useState(false);\r\n    const changeHandlerForAnswerImage = async (event) => {\r\n        if (event.target.files[0]){\r\n        await setSelectedAnswerImage(event.target.files[0]);\r\n        await setIsSelectedAnswerImage(true);\r\n        handleSubmissionAnswerImage(event.target.files[0])\r\n        }\r\n    };\r\n\r\n    const handleSubmissionAnswerImage = (img: any) => {\r\n        console.log(\"---\")\r\n        const formData = new FormData();\r\n\r\n        formData.append('image', img);\r\n        formData.append('owner_answer', '14');\r\n        fetch(\r\n            'https://iot-experemental.herokuapp.com/files/answer?update_id=14',\r\n            {\r\n                method: 'POST',\r\n                body: formData,\r\n            }\r\n        )\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                console.log('Success:', result);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    };\r\n    return(\r\n        <div>\r\n            <div>\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                    component=\"label\"\r\n                >\r\n                    <input type=\"file\"  hidden name=\"file\" onChange={changeHandlerForAnswerImage} />\r\n                    Upload File\r\n                </Button>\r\n                {isSelectedAnswerImage ? (\r\n                    <div>\r\n                        Filename: {selectedAnswerImage?.name}\r\n                    </div>\r\n                ) : (\r\n                    <p>Select a file to show details</p>\r\n                )}\r\n            {/*            <Button  color=\"primary\"*/}\r\n            {/*                     variant=\"contained\"*/}\r\n            {/*                     onClick={handleSubmissionAnswerImage}>S</Button>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTest\\ImageQuestion.tsx",["198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTest\\ImageAnswerNode.tsx",["214","215"],{"ruleId":"216","severity":1,"message":"217","line":8,"column":39,"nodeType":"218","messageId":"219","endLine":8,"endColumn":42},{"ruleId":"216","severity":1,"message":"220","line":19,"column":8,"nodeType":"218","messageId":"219","endLine":19,"endColumn":22},{"ruleId":"221","severity":1,"message":"222","line":48,"column":1,"nodeType":"223","messageId":"224","endLine":48,"endColumn":15},{"ruleId":"216","severity":1,"message":"225","line":62,"column":34,"nodeType":"218","messageId":"219","endLine":62,"endColumn":39},{"ruleId":"221","severity":1,"message":"222","line":1,"column":25,"nodeType":"226","messageId":"224","endLine":1,"endColumn":39},{"ruleId":"221","severity":1,"message":"227","line":1,"column":25,"nodeType":"218","messageId":"228","endLine":1,"endColumn":36},{"ruleId":"216","severity":1,"message":"229","line":7,"column":14,"nodeType":"218","messageId":"219","endLine":7,"endColumn":25},{"ruleId":"216","severity":1,"message":"230","line":8,"column":9,"nodeType":"218","messageId":"219","endLine":8,"endColumn":18},{"ruleId":"216","severity":1,"message":"231","line":10,"column":7,"nodeType":"218","messageId":"219","endLine":10,"endColumn":19},{"ruleId":"221","severity":1,"message":"222","line":22,"column":16,"nodeType":"223","messageId":"224","endLine":22,"endColumn":34},{"ruleId":"216","severity":1,"message":"232","line":9,"column":9,"nodeType":"218","messageId":"219","endLine":9,"endColumn":19},{"ruleId":"221","severity":1,"message":"222","line":58,"column":8,"nodeType":"223","messageId":"224","endLine":58,"endColumn":30},{"ruleId":"216","severity":1,"message":"233","line":3,"column":8,"nodeType":"218","messageId":"219","endLine":3,"endColumn":12},{"ruleId":"216","severity":1,"message":"217","line":6,"column":10,"nodeType":"218","messageId":"219","endLine":6,"endColumn":13},{"ruleId":"216","severity":1,"message":"234","line":6,"column":15,"nodeType":"218","messageId":"219","endLine":6,"endColumn":23},{"ruleId":"221","severity":1,"message":"222","line":17,"column":5,"nodeType":"235","messageId":"224","endLine":17,"endColumn":13},{"ruleId":"216","severity":1,"message":"236","line":5,"column":9,"nodeType":"218","messageId":"219","endLine":5,"endColumn":13},{"ruleId":"216","severity":1,"message":"234","line":7,"column":14,"nodeType":"218","messageId":"219","endLine":7,"endColumn":22},{"ruleId":"221","severity":1,"message":"222","line":27,"column":16,"nodeType":"223","messageId":"224","endLine":27,"endColumn":32},{"ruleId":"216","severity":1,"message":"225","line":31,"column":27,"nodeType":"218","messageId":"219","endLine":31,"endColumn":32},{"ruleId":"221","severity":1,"message":"222","line":6,"column":16,"nodeType":"223","messageId":"224","endLine":6,"endColumn":34},{"ruleId":"216","severity":1,"message":"237","line":24,"column":8,"nodeType":"218","messageId":"219","endLine":24,"endColumn":18},{"ruleId":"221","severity":1,"message":"222","line":213,"column":16,"nodeType":"223","messageId":"224","endLine":213,"endColumn":38},{"ruleId":"216","severity":1,"message":"225","line":215,"column":18,"nodeType":"218","messageId":"219","endLine":215,"endColumn":23},{"ruleId":"216","severity":1,"message":"238","line":215,"column":25,"nodeType":"218","messageId":"219","endLine":215,"endColumn":32},{"ruleId":"216","severity":1,"message":"239","line":222,"column":12,"nodeType":"218","messageId":"219","endLine":222,"endColumn":41},{"ruleId":"216","severity":1,"message":"240","line":262,"column":62,"nodeType":"218","messageId":"219","endLine":262,"endColumn":83},{"ruleId":"216","severity":1,"message":"241","line":333,"column":11,"nodeType":"218","messageId":"219","endLine":333,"endColumn":35},{"ruleId":"216","severity":1,"message":"242","line":336,"column":11,"nodeType":"218","messageId":"219","endLine":336,"endColumn":42},{"ruleId":"221","severity":1,"message":"222","line":16,"column":16,"nodeType":"223","messageId":"224","endLine":16,"endColumn":39},{"ruleId":"216","severity":1,"message":"230","line":1,"column":16,"nodeType":"218","messageId":"219","endLine":1,"endColumn":25},{"ruleId":"216","severity":1,"message":"237","line":12,"column":8,"nodeType":"218","messageId":"219","endLine":12,"endColumn":18},{"ruleId":"221","severity":1,"message":"222","line":107,"column":16,"nodeType":"223","messageId":"224","endLine":107,"endColumn":41},{"ruleId":"216","severity":1,"message":"225","line":108,"column":18,"nodeType":"218","messageId":"219","endLine":108,"endColumn":23},{"ruleId":"216","severity":1,"message":"238","line":108,"column":25,"nodeType":"218","messageId":"219","endLine":108,"endColumn":32},{"ruleId":"216","severity":1,"message":"243","line":109,"column":23,"nodeType":"218","messageId":"219","endLine":109,"endColumn":27},{"ruleId":"216","severity":1,"message":"244","line":158,"column":12,"nodeType":"218","messageId":"219","endLine":158,"endColumn":25},{"ruleId":"216","severity":1,"message":"245","line":158,"column":27,"nodeType":"218","messageId":"219","endLine":158,"endColumn":46},{"ruleId":"216","severity":1,"message":"246","line":164,"column":12,"nodeType":"218","messageId":"219","endLine":164,"endColumn":24},{"ruleId":"216","severity":1,"message":"247","line":203,"column":34,"nodeType":"218","messageId":"219","endLine":203,"endColumn":52},{"ruleId":"216","severity":1,"message":"248","line":1,"column":16,"nodeType":"218","messageId":"219","endLine":1,"endColumn":23},{"ruleId":"216","severity":1,"message":"249","line":1,"column":25,"nodeType":"218","messageId":"219","endLine":1,"endColumn":33},{"ruleId":"221","severity":1,"message":"222","line":23,"column":16,"nodeType":"223","messageId":"224","endLine":23,"endColumn":37},{"ruleId":"216","severity":1,"message":"250","line":25,"column":43,"nodeType":"218","messageId":"219","endLine":25,"endColumn":54},{"ruleId":"216","severity":1,"message":"230","line":1,"column":16,"nodeType":"218","messageId":"219","endLine":1,"endColumn":25},{"ruleId":"221","severity":1,"message":"222","line":52,"column":16,"nodeType":"223","messageId":"224","endLine":52,"endColumn":49},{"ruleId":"221","severity":1,"message":"251","line":52,"column":38,"nodeType":"218","messageId":"252","endLine":52,"endColumn":48},{"ruleId":"216","severity":1,"message":"253","line":52,"column":38,"nodeType":"218","messageId":"219","endLine":52,"endColumn":48},{"ruleId":"216","severity":1,"message":"225","line":106,"column":18,"nodeType":"218","messageId":"219","endLine":106,"endColumn":23},{"ruleId":"216","severity":1,"message":"238","line":106,"column":25,"nodeType":"218","messageId":"219","endLine":106,"endColumn":32},{"ruleId":"216","severity":1,"message":"254","line":106,"column":34,"nodeType":"218","messageId":"219","endLine":106,"endColumn":41},{"ruleId":"216","severity":1,"message":"255","line":126,"column":43,"nodeType":"218","messageId":"219","endLine":126,"endColumn":63},{"ruleId":"216","severity":1,"message":"256","line":126,"column":72,"nodeType":"218","messageId":"219","endLine":126,"endColumn":90},{"ruleId":"221","severity":1,"message":"257","line":7,"column":17,"nodeType":"218","messageId":"228","endLine":7,"endColumn":22},{"ruleId":"221","severity":1,"message":"222","line":24,"column":5,"nodeType":"235","messageId":"224","endLine":24,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":37,"column":5,"nodeType":"235","messageId":"224","endLine":37,"endColumn":15},{"ruleId":"221","severity":1,"message":"222","line":46,"column":5,"nodeType":"235","messageId":"224","endLine":46,"endColumn":19},{"ruleId":"221","severity":1,"message":"222","line":59,"column":5,"nodeType":"235","messageId":"224","endLine":59,"endColumn":18},{"ruleId":"221","severity":1,"message":"222","line":84,"column":5,"nodeType":"235","messageId":"224","endLine":84,"endColumn":26},{"ruleId":"221","severity":1,"message":"258","line":84,"column":15,"nodeType":"218","messageId":"228","endLine":84,"endColumn":25},{"ruleId":"221","severity":1,"message":"222","line":100,"column":5,"nodeType":"235","messageId":"224","endLine":100,"endColumn":13},{"ruleId":"221","severity":1,"message":"222","line":7,"column":16,"nodeType":"223","messageId":"224","endLine":7,"endColumn":36},{"ruleId":"216","severity":1,"message":"248","line":1,"column":27,"nodeType":"218","messageId":"219","endLine":1,"endColumn":34},{"ruleId":"216","severity":1,"message":"259","line":2,"column":14,"nodeType":"218","messageId":"219","endLine":2,"endColumn":18},{"ruleId":"216","severity":1,"message":"260","line":3,"column":19,"nodeType":"218","messageId":"219","endLine":3,"endColumn":23},{"ruleId":"216","severity":1,"message":"261","line":4,"column":9,"nodeType":"218","messageId":"219","endLine":4,"endColumn":12},{"ruleId":"216","severity":1,"message":"262","line":4,"column":14,"nodeType":"218","messageId":"219","endLine":4,"endColumn":20},{"ruleId":"216","severity":1,"message":"263","line":8,"column":8,"nodeType":"218","messageId":"219","endLine":8,"endColumn":15},{"ruleId":"216","severity":1,"message":"264","line":14,"column":9,"nodeType":"218","messageId":"219","endLine":14,"endColumn":24},{"ruleId":"221","severity":1,"message":"222","line":32,"column":16,"nodeType":"223","messageId":"224","endLine":32,"endColumn":47},{"ruleId":"221","severity":1,"message":"251","line":32,"column":36,"nodeType":"218","messageId":"252","endLine":32,"endColumn":46},{"ruleId":"216","severity":1,"message":"265","line":82,"column":63,"nodeType":"218","messageId":"219","endLine":82,"endColumn":84},{"ruleId":"216","severity":1,"message":"236","line":4,"column":35,"nodeType":"218","messageId":"219","endLine":4,"endColumn":39},{"ruleId":"221","severity":1,"message":"257","line":7,"column":17,"nodeType":"218","messageId":"228","endLine":7,"endColumn":22},{"ruleId":"221","severity":1,"message":"222","line":10,"column":5,"nodeType":"235","messageId":"224","endLine":10,"endColumn":13},{"ruleId":"216","severity":1,"message":"266","line":3,"column":24,"nodeType":"218","messageId":"219","endLine":3,"endColumn":33},{"ruleId":"216","severity":1,"message":"267","line":4,"column":16,"nodeType":"218","messageId":"219","endLine":4,"endColumn":28},{"ruleId":"221","severity":1,"message":"222","line":56,"column":16,"nodeType":"223","messageId":"224","endLine":56,"endColumn":49},{"ruleId":"221","severity":1,"message":"251","line":56,"column":38,"nodeType":"218","messageId":"252","endLine":56,"endColumn":48},{"ruleId":"216","severity":1,"message":"268","line":60,"column":28,"nodeType":"218","messageId":"219","endLine":60,"endColumn":45},{"ruleId":"216","severity":1,"message":"255","line":62,"column":43,"nodeType":"218","messageId":"219","endLine":62,"endColumn":63},{"ruleId":"216","severity":1,"message":"256","line":62,"column":72,"nodeType":"218","messageId":"219","endLine":62,"endColumn":90},{"ruleId":"216","severity":1,"message":"269","line":63,"column":18,"nodeType":"218","messageId":"219","endLine":63,"endColumn":38},{"ruleId":"216","severity":1,"message":"270","line":81,"column":12,"nodeType":"218","messageId":"219","endLine":81,"endColumn":33},{"ruleId":"216","severity":1,"message":"271","line":227,"column":49,"nodeType":"218","messageId":"219","endLine":227,"endColumn":50},{"ruleId":"216","severity":1,"message":"230","line":1,"column":16,"nodeType":"218","messageId":"219","endLine":1,"endColumn":25},{"ruleId":"216","severity":1,"message":"272","line":1,"column":27,"nodeType":"218","messageId":"219","endLine":1,"endColumn":33},{"ruleId":"216","severity":1,"message":"273","line":2,"column":17,"nodeType":"218","messageId":"219","endLine":2,"endColumn":22},{"ruleId":"216","severity":1,"message":"274","line":3,"column":9,"nodeType":"218","messageId":"219","endLine":3,"endColumn":12},{"ruleId":"216","severity":1,"message":"275","line":3,"column":14,"nodeType":"218","messageId":"219","endLine":3,"endColumn":17},{"ruleId":"221","severity":1,"message":"222","line":4,"column":16,"nodeType":"223","messageId":"224","endLine":4,"endColumn":45},{"ruleId":"221","severity":1,"message":"251","line":4,"column":34,"nodeType":"218","messageId":"252","endLine":4,"endColumn":44},{"ruleId":"216","severity":1,"message":"253","line":4,"column":34,"nodeType":"218","messageId":"219","endLine":4,"endColumn":44},{"ruleId":"216","severity":1,"message":"276","line":8,"column":8,"nodeType":"218","messageId":"219","endLine":8,"endColumn":18},{"ruleId":"216","severity":1,"message":"277","line":10,"column":8,"nodeType":"218","messageId":"219","endLine":10,"endColumn":24},{"ruleId":"216","severity":1,"message":"278","line":11,"column":8,"nodeType":"218","messageId":"219","endLine":11,"endColumn":21},{"ruleId":"216","severity":1,"message":"279","line":12,"column":8,"nodeType":"218","messageId":"219","endLine":12,"endColumn":20},{"ruleId":"216","severity":1,"message":"280","line":16,"column":17,"nodeType":"218","messageId":"219","endLine":16,"endColumn":31},{"ruleId":"216","severity":1,"message":"281","line":16,"column":33,"nodeType":"218","messageId":"219","endLine":16,"endColumn":44},{"ruleId":"221","severity":1,"message":"222","line":83,"column":16,"nodeType":"223","messageId":"224","endLine":83,"endColumn":50},{"ruleId":"221","severity":1,"message":"251","line":83,"column":39,"nodeType":"218","messageId":"252","endLine":83,"endColumn":49},{"ruleId":"216","severity":1,"message":"282","line":84,"column":11,"nodeType":"218","messageId":"219","endLine":84,"endColumn":18},{"ruleId":"216","severity":1,"message":"283","line":85,"column":11,"nodeType":"218","messageId":"219","endLine":85,"endColumn":16},{"ruleId":"216","severity":1,"message":"268","line":89,"column":28,"nodeType":"218","messageId":"219","endLine":89,"endColumn":45},{"ruleId":"216","severity":1,"message":"270","line":93,"column":12,"nodeType":"218","messageId":"219","endLine":93,"endColumn":33},{"ruleId":"216","severity":1,"message":"255","line":100,"column":43,"nodeType":"218","messageId":"219","endLine":100,"endColumn":63},{"ruleId":"216","severity":1,"message":"256","line":100,"column":72,"nodeType":"218","messageId":"219","endLine":100,"endColumn":90},{"ruleId":"216","severity":1,"message":"269","line":100,"column":101,"nodeType":"218","messageId":"219","endLine":100,"endColumn":121},{"ruleId":"216","severity":1,"message":"284","line":278,"column":43,"nodeType":"218","messageId":"219","endLine":278,"endColumn":54},{"ruleId":"221","severity":1,"message":"222","line":47,"column":16,"nodeType":"223","messageId":"224","endLine":47,"endColumn":52},{"ruleId":"221","severity":1,"message":"251","line":47,"column":41,"nodeType":"218","messageId":"252","endLine":47,"endColumn":51},"@typescript-eslint/no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","'UpdateQuestion' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","'error' is assigned a value but never used.","ArrowFunctionExpression","Argument 'onPerfEntry' should be typed.","missingArgType","'useMutation' is defined but never used.","'useEffect' is defined but never used.","'VERIFY_LOGIN' is assigned a value but never used.","'Typography' is defined but never used.","'logo' is defined but never used.","'useQuery' is defined but never used.","FunctionExpression","'Card' is defined but never used.","'AlertTitle' is defined but never used.","'loading' is assigned a value but never used.","'selectedRowInQuestionDataGrid' is assigned a value but never used.","'update_author_loading' is assigned a value but never used.","'newThemeNameHandleChange' is assigned a value but never used.","'newThemeDescriptionHandleChange' is assigned a value but never used.","'data' is defined but never used.","'questionImage' is assigned a value but never used.","'changeQuestionImage' is assigned a value but never used.","'answersArray' is assigned a value but never used.","'create_answer_data' is assigned a value but never used.","'useMemo' is defined but never used.","'useState' is defined but never used.","'check_error' is assigned a value but never used.","Argument 'props' should be typed with a non-any type.","anyTypedArg","'props' is defined but never used.","'refetch' is assigned a value but never used.","'get_question_loading' is assigned a value but never used.","'get_question_error' is assigned a value but never used.","Argument 'props' should be typed.","Argument 'questionId' should be typed.","'Form' is defined but never used.","'Fade' is defined but never used.","'any' is defined but never used.","'number' is defined but never used.","'Divider' is defined but never used.","'assertDirective' is defined but never used.","'update_answer_loading' is assigned a value but never used.","'TextField' is defined but never used.","'Autocomplete' is defined but never used.","'setKolShowAnswers' is assigned a value but never used.","'refetch_get_question' is assigned a value but never used.","'activeWrongQuestionId' is assigned a value but never used.","'e' is defined but never used.","'useRef' is defined but never used.","'Input' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'IconButton' is defined but never used.","'SkipPreviousIcon' is defined but never used.","'PlayArrowIcon' is defined but never used.","'SkipNextIcon' is defined but never used.","'CardActionArea' is defined but never used.","'CardActions' is defined but never used.","'classes' is assigned a value but never used.","'theme' is assigned a value but never used.","'answerIndex' is defined but never used."]