[{"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\index.js":"1","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\App.js":"2","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\reportWebVitals.js":"3","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\Navibar.tsx":"4","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\search.tsx":"5","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\Login.tsx":"6","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\UnLogin.tsx":"7","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\Registration.tsx":"8","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\CreatePoint.tsx":"9","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\UpdateQuestion.tsx":"10","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\AnswerNode.tsx":"11","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\MainEditor.tsx":"12","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\TakeTheTest.tsx":"13","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Menu\\MainMenu.tsx":"14","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTest\\MainUserTest.tsx":"15","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\CreateUserTest.jsx":"16","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\ShowErrorsOnScreen.jsx":"17"},{"size":2129,"mtime":1617356905539,"results":"18","hashOfConfig":"19"},{"size":4127,"mtime":1617359114659,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":2821,"mtime":1617359134565,"results":"22","hashOfConfig":"19"},{"size":7829,"mtime":1617208565684,"results":"23","hashOfConfig":"19"},{"size":3288,"mtime":1615720908444,"results":"24","hashOfConfig":"19"},{"size":707,"mtime":1615723909221,"results":"25","hashOfConfig":"19"},{"size":5786,"mtime":1615871391761,"results":"26","hashOfConfig":"19"},{"size":35041,"mtime":1617357652725,"results":"27","hashOfConfig":"19"},{"size":14373,"mtime":1617133320070,"results":"28","hashOfConfig":"19"},{"size":11317,"mtime":1617135891754,"results":"29","hashOfConfig":"19"},{"size":1024,"mtime":1617136010188,"results":"30","hashOfConfig":"19"},{"size":6830,"mtime":1617359114649,"results":"31","hashOfConfig":"19"},{"size":2976,"mtime":1617359164125,"results":"32","hashOfConfig":"19"},{"size":13007,"mtime":1617358811413,"results":"33","hashOfConfig":"19"},{"size":22629,"mtime":1614026285274,"results":"34","hashOfConfig":"19"},{"size":5414,"mtime":1615122806127,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"u1dxx6",{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"49"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"49"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\index.js",["80"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\App.js",["81","82","83"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\reportWebVitals.js",["84","85"],"const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",[],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\Navibar.tsx",["86","87","88","89"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Navbar\\search.tsx",["90"],"import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\n\r\nconst filter = createFilterOptions<FilmOptionType>();\r\n\r\nexport default function NavSearch() {\r\n    const [value, setValue] = React.useState<FilmOptionType | null>(null);\r\n\r\n    return (\r\n        <Autocomplete\r\n            size=\"small\"\r\n            value={value}\r\n            onChange={(event, newValue) => {\r\n                if (typeof newValue === 'string') {\r\n                    setValue({\r\n                        title: newValue,\r\n                    });\r\n                } else if (newValue && newValue.inputValue) {\r\n                    // Create a new value from the user input\r\n                    setValue({\r\n                        title: newValue.inputValue,\r\n                    });\r\n                } else {\r\n                    setValue(newValue);\r\n                }\r\n            }}\r\n            filterOptions={(options, params) => {\r\n                const filtered = filter(options, params);\r\n\r\n                // Suggest the creation of a new value\r\n                // if (params.inputValue !== '') {\r\n                //     filtered.push({\r\n                //         inputValue: params.inputValue,\r\n                //         title: `Add \"${params.inputValue}\"`,\r\n                //     });\r\n                // }\r\n\r\n                return filtered;\r\n            }}\r\n            selectOnFocus\r\n            clearOnBlur\r\n            handleHomeEndKeys\r\n            id=\"free-solo-with-text-demo\"\r\n            options={top100Films}\r\n            getOptionLabel={(option) => {\r\n                // Value selected with enter, right from the input\r\n                if (typeof option === 'string') {\r\n                    return option;\r\n                }\r\n                // Add \"xxx\" option created dynamically\r\n                if (option.inputValue) {\r\n                    return option.inputValue;\r\n                }\r\n                // Regular option\r\n                return option.title;\r\n            }}\r\n            renderOption={(option) => option.title}\r\n            \r\n            freeSolo\r\n            renderInput={(params) => (\r\n                <TextField {...params} label=\"Введите название карточки или темы\" variant=\"outlined\" />\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\ninterface FilmOptionType {\r\n    inputValue?: string;\r\n    title: string;\r\n    year?: number;\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films: FilmOptionType[] = [\r\n    // { title: 'The Shawshank Redemption', year: 1994 },\r\n    // { title: 'The Godfather', year: 1972 },\r\n    // { title: 'The Godfather: Part II', year: 1974 },\r\n    // { title: 'The Dark Knight', year: 2008 },\r\n    // { title: '12 Angry Men', year: 1957 },\r\n    // { title: \"Schindler's List\", year: 1993 },\r\n    // { title: 'Pulp Fiction', year: 1994 },\r\n    // { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n    // { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n    // { title: 'Fight Club', year: 1999 },\r\n    // { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n    // { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n    // { title: 'Forrest Gump', year: 1994 },\r\n    // { title: 'Inception', year: 2010 },\r\n    // { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n    // { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n    // { title: 'Goodfellas', year: 1990 },\r\n    // { title: 'The Matrix', year: 1999 },\r\n    // { title: 'Seven Samurai', year: 1954 },\r\n    // { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n    // { title: 'City of God', year: 2002 },\r\n    // { title: 'Se7en', year: 1995 },\r\n    // { title: 'The Silence of the Lambs', year: 1991 },\r\n    // { title: \"It's a Wonderful Life\", year: 1946 },\r\n    // { title: 'Life Is Beautiful', year: 1997 },\r\n    // { title: 'The Usual Suspects', year: 1995 },\r\n    // { title: 'Léon: The Professional', year: 1994 },\r\n    // { title: 'Spirited Away', year: 2001 },\r\n    // { title: 'Saving Private Ryan', year: 1998 },\r\n    // { title: 'Once Upon a Time in the West', year: 1968 },\r\n    // { title: 'American History X', year: 1998 },\r\n    // { title: 'Interstellar', year: 2014 },\r\n    // { title: 'Casablanca', year: 1942 },\r\n    // { title: 'City Lights', year: 1931 },\r\n    // { title: 'Psycho', year: 1960 },\r\n    // { title: 'The Green Mile', year: 1999 },\r\n    // { title: 'The Intouchables', year: 2011 },\r\n    // { title: 'Modern Times', year: 1936 },\r\n    // { title: 'Raiders of the Lost Ark', year: 1981 },\r\n    // { title: 'Rear Window', year: 1954 },\r\n    // { title: 'The Pianist', year: 2002 },\r\n    // { title: 'The Departed', year: 2006 },\r\n    // { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n    // { title: 'Back to the Future', year: 1985 },\r\n    // { title: 'Whiplash', year: 2014 },\r\n    // { title: 'Gladiator', year: 2000 },\r\n    // { title: 'Memento', year: 2000 },\r\n    // { title: 'The Prestige', year: 2006 },\r\n    // { title: 'The Lion King', year: 1994 },\r\n    // { title: 'Apocalypse Now', year: 1979 },\r\n    // { title: 'Alien', year: 1979 },\r\n    // { title: 'Sunset Boulevard', year: 1950 },\r\n    // {\r\n    //     title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    //     year: 1964,\r\n    // },\r\n    // { title: 'The Great Dictator', year: 1940 },\r\n    // { title: 'Cinema Paradiso', year: 1988 },\r\n    // { title: 'The Lives of Others', year: 2006 },\r\n    // { title: 'Grave of the Fireflies', year: 1988 },\r\n    // { title: 'Paths of Glory', year: 1957 },\r\n    // { title: 'Django Unchained', year: 2012 },\r\n    // { title: 'The Shining', year: 1980 },\r\n    // { title: 'WALL·E', year: 2008 },\r\n    // { title: 'American Beauty', year: 1999 },\r\n    // { title: 'The Dark Knight Rises', year: 2012 },\r\n    // { title: 'Princess Mononoke', year: 1997 },\r\n    // { title: 'Aliens', year: 1986 },\r\n    // { title: 'Oldboy', year: 2003 },\r\n    // { title: 'Once Upon a Time in America', year: 1984 },\r\n    // { title: 'Witness for the Prosecution', year: 1957 },\r\n    // { title: 'Das Boot', year: 1981 },\r\n    // { title: 'Citizen Kane', year: 1941 },\r\n    // { title: 'North by Northwest', year: 1959 },\r\n    // { title: 'Vertigo', year: 1958 },\r\n    // { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n    // { title: 'Reservoir Dogs', year: 1992 },\r\n    // { title: 'Braveheart', year: 1995 },\r\n    // { title: 'M', year: 1931 },\r\n    // { title: 'Requiem for a Dream', year: 2000 },\r\n    // { title: 'Amélie', year: 2001 },\r\n    // { title: 'A Clockwork Orange', year: 1971 },\r\n    // { title: 'Like Stars on Earth', year: 2007 },\r\n    // { title: 'Taxi Driver', year: 1976 },\r\n    // { title: 'Lawrence of Arabia', year: 1962 },\r\n    // { title: 'Double Indemnity', year: 1944 },\r\n    // { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n    // { title: 'Amadeus', year: 1984 },\r\n    // { title: 'To Kill a Mockingbird', year: 1962 },\r\n    // { title: 'Toy Story 3', year: 2010 },\r\n    // { title: 'Logan', year: 2017 },\r\n    // { title: 'Full Metal Jacket', year: 1987 },\r\n    // { title: 'Dangal', year: 2016 },\r\n    // { title: 'The Sting', year: 1973 },\r\n    // { title: '2001: A Space Odyssey', year: 1968 },\r\n    // { title: \"Singin' in the Rain\", year: 1952 },\r\n    // { title: 'Toy Story', year: 1995 },\r\n    // { title: 'Bicycle Thieves', year: 1948 },\r\n    // { title: 'The Kid', year: 1921 },\r\n    // { title: 'Inglourious Basterds', year: 2009 },\r\n    // { title: 'Snatch', year: 2000 },\r\n    // { title: '3 Idiots', year: 2009 },\r\n    // { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];",[],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\Login.tsx",["91","92","93","94"],"/* eslint-disable no-unused-expressions */\r\n\r\nimport * as React from 'react'\r\nimport 'react-bootstrap';\r\nimport {Card, Container, Form, Button, Alert} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport {gql, useQuery, useMutation} from \"@apollo/client\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst LOGIN_MUTATION = gql`\r\n    mutation AUTHORIZATION($pass: String!, $mail: String!){\r\n      tokenAuth(password: $pass, email: $mail){\r\n        token\r\n        refreshToken\r\n        success\r\n        errors\r\n        user{\r\n          id\r\n          username\r\n          isStaff\r\n          userAccessLevel\r\n        }\r\n      }\r\n    }`\r\n\r\nexport default function Login(){\r\n    const [mail, changeMail] = useState('')\r\n    const [password, changePassword] = useState('')\r\n    const history = useHistory();\r\n    const [login, { data, error }] = useMutation(LOGIN_MUTATION, {\r\n        variables: {\r\n            pass: password,\r\n            mail: mail\r\n        }\r\n    })\r\n\r\n    // if(data){\r\n    //     console.log(data)\r\n    // }\r\n    const saveLoginData = () => {\r\n\r\n        localStorage.setItem('token', data.tokenAuth.token)\r\n        localStorage.setItem('refreshToken', data.tokenAuth.refreshToken)\r\n        localStorage.setItem('is_login', 'true')\r\n        setTimeout(()=>{\r\n            window.location.reload(false);\r\n        }, 500)\r\n    }\r\n    {data ?  data.tokenAuth.success ? saveLoginData() : null : null}\r\n    {localStorage.getItem('is_login') === 'true' ? setTimeout(history.push, 1000, '/'): null}\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <div className=\"display-4 text-center mt-5\" style={{fontSize: '33px'}}>Введите email и пароль</div>\r\n                <div className=\"col-4 offset-4 mt-3\">\r\n                    {/*<Card>*/}\r\n                        <Form>\r\n                            <Form.Group>\r\n                                <Form.Label>Введите ваш email</Form.Label>\r\n                                <Form.Control type=\"email\" placeholder=\"email\" value={mail} onChange={(event) =>{changeMail(event.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label>Введите пароль</Form.Label>\r\n                                <Form.Control type=\"password\" placeholder=\"Пароль\" value={password} onChange={(event) =>{changePassword(event.target.value)}}/>\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" type=\"submit\" className=\"mr-auto\" size=\"lg\" block onClick={(event => {event.preventDefault(); login()})}>\r\n                                Войти\r\n                            </Button>\r\n                            {data ? data.tokenAuth.success ? <Alert variant=\"success\" className=\"mt-2\">Поздравляем, вы вошли</Alert> : <Alert variant='danger' className=\"mt-2\">Ошибка в логине или пароле</Alert> : null}\r\n                            {/*{data ? data.tokenAuth.success === false ? <div>Ошибка в логине или пароле</div>: null: null}*/}\r\n                        </Form>\r\n                    {/*</Card>*/}\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\UnLogin.tsx",["95"],"import * as React from 'react'\r\n// import 'react-bootstrap';\r\nimport {Spinner} from \"react-bootstrap\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function UnLogin(){\r\n    const history = useHistory();\r\n    localStorage.setItem('token', 'wrong key')\r\n    localStorage.setItem('is_login', 'false')\r\n    localStorage.setItem('user_name', '')\r\n    localStorage.setItem('refreshToken', 'wrong refresh token')\r\n    setTimeout(()=>{\r\n        window.location.reload(false);\r\n    }, 1000)\r\n    setTimeout(history.push, 500, '/')\r\n    return(\r\n        <div className=\"col-1 offset-6 justify-content-center mt-4\">\r\n        <Spinner animation=\"border\" variant=\"primary\" />\r\n        </div>\r\n    )\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Login\\Registration.tsx",["96"],"import * as React from 'react'\r\nimport {Alert, Button, Container, Form} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport {gql, useMutation} from \"@apollo/client\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst REGISTRATION_MUTATION = gql`\r\nmutation REGISTER($email: String!, $password1: String!, $password2: String!, $username: String!){\r\n  register(email: $email, password1: $password1, password2: $password2, username: $username){\r\n    success\r\n    errors\r\n    refreshToken\r\n    token\r\n  }\r\n}`\r\nexport default function Registration(){\r\n    const [mail, changeMail] = useState('')\r\n    const [userName, changeUserName] = useState('')\r\n    const [password1, changePassword1] = useState('')\r\n    const [password2, changePassword2] = useState('')\r\n    const history = useHistory();\r\n\r\n    const [registration, { data, error }] = useMutation(REGISTRATION_MUTATION, {\r\n        variables: {\r\n            email: mail,\r\n            password1: password1,\r\n            password2: password2,\r\n            username: userName\r\n        }\r\n    })\r\n    const saveData = () =>{\r\n        localStorage.setItem('token', data.register.token)\r\n        localStorage.setItem('refreshToken', data.register.refreshToken)\r\n        localStorage.setItem('is_login', 'true')\r\n        setTimeout(()=>{\r\n            window.location.reload(false);\r\n        }, 500)\r\n    }\r\n    {data?.register.success ?  data?.register.success === true? saveData(): null: null}\r\n    {localStorage.getItem('is_login') === 'true' ? setTimeout(history.push, 1000, '/'): null}\r\n    {data ? console.log(data): null}\r\n    {error ? console.log(error): null}\r\n    return(\r\n        <div>\r\n            <Container>\r\n                <div className=\"display-4 text-center mt-5\" style={{fontSize: '33px'}}>Регистрация</div>\r\n                <div className=\"col-4 offset-4 mt-3\">\r\n                    {/*<Card>*/}\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Label>Введите имя пользователя</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Имя пользователя\" value={userName} onChange={(event) =>{changeUserName(event.target.value)}}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Введите ваш email</Form.Label>\r\n                            <Form.Control type=\"email\" placeholder=\"email\" value={mail} onChange={(event) =>{changeMail(event.target.value)}}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Введите пароль</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Пароль\" value={password1} onChange={(event) =>{changePassword1(event.target.value)}}/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Повторно введите пароль</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Пароль\" value={password2} onChange={(event) =>{changePassword2(event.target.value)}}/>\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\" className=\"mr-auto\" size=\"lg\" block onClick={(event => {event.preventDefault(); registration()})}>\r\n                            Зарегистрироваться\r\n                        </Button>\r\n                        { data?.register.errors.email ? data?.register.errors.email[0].message === \"A user with that email already exists.\" ?\r\n                            <Alert variant='danger' className=\"mt-2\" >Этот email уже был использован</Alert>: null: null}\r\n                        { data?.register.errors.username ? data?.register.errors.username[0].message === \"Enter a valid username. This value may contain only letters, numbers, and @/./+/-/_ characters.\" ?\r\n                            <Alert variant='danger' className=\"mt-2\" >Имя пользователя может содержать только буквы, цифры и символы @/./+/-/_</Alert>: null: null}\r\n                        { data?.register.errors.username ? data?.register.errors.username[0].message === \"A user with that username already exists.\" ?\r\n                            <Alert variant='danger' className=\"mt-2\" >Пользователь с таким именем уже создан</Alert>: null: null}\r\n                        { data?.register.errors.password2 ? data?.register.errors.password2[0].message === \"The two password fields didn’t match.\" ?\r\n                            <Alert variant='danger' className=\"mt-2\" >Пароли не совпадают</Alert>: null: null}\r\n                        { data?.register.errors.password2 ? (data?.register.errors.password2[0].message === \"This password is too short. It must contain at least 8 characters.\") ||\r\n                        (data?.register.errors.password2[0].message === \"This password is too common.\") ||\r\n                        (data?.register.errors.password2[0].message === \"This password is entirely numeric.\")?\r\n                            <Alert variant='danger' className=\"mt-2\" >Пароль слишком простой</Alert>: null: null}\r\n\r\n                        {data?.register.success ?  data?.register.success === true? <Alert variant='primary' className=\"mt-2\">Вы зарегистрировались, запрос на подтверждение аккаунта отправлен вам на почту</Alert>: null: null}\r\n\r\n                    </Form>\r\n                    {/*</Card>*/}\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\CreatePoint.tsx",["97","98","99","100","101","102","103"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\UpdateQuestion.tsx",["104","105","106","107","108","109"],"import React, {useMemo, useState} from \"react\";\r\nimport {gql, useMutation, useQuery} from \"@apollo/client\";\r\nimport {Col, Row, Spinner} from \"react-bootstrap\";\r\nimport {Alert, Autocomplete} from \"@material-ui/lab\";\r\nimport {Button, Container, Snackbar, TextField} from \"@material-ui/core\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport AnswerNode from \"./AnswerNode\";\r\n\r\nconst CONTEXT_DATA = gql`\r\nquery{\r\n  me{\r\n    questionSet{\r\n      id\r\n      theme{\r\n        id\r\n        name\r\n        description\r\n      }\r\n      author{\r\n        id\r\n        name\r\n      }\r\n      text\r\n      videoUrl\r\n      answers{\r\n        id\r\n        isTrue\r\n        text\r\n        helpTextv1\r\n        helpTextv2\r\n        helpTextv3\r\n        checkQueue\r\n        videoUrl\r\n        hardLevelOfAnswer \r\n      }\r\n    }\r\n    questionauthorSet{\r\n      id\r\n      name\r\n    }\r\n  }\r\n  questionThemes{\r\n    id\r\n    name\r\n    description\r\n  }\r\n}`\r\n\r\nconst CREATE_NEW_ANSWER = gql`mutation CREATE_ANSWER($question: ID!){\r\n  createAnswer(input: {createdBy:0, question: $question, isTrue:true, checkQueue: 1, hardLevelOfAnswer:\"MEDIUM\"}){\r\n    errors{\r\n      field\r\n      messages\r\n    }\r\n  }\r\n}`\r\n\r\nconst UPDATE_QUESTION = gql`mutation UPDATE_QUESTION($createdBy: ID!, $theme: [ID]!, $author: [ID]!, $text: String!, $videoUrl: String, $id: ID!){\r\n  updateQuestion(input: {createdBy:$createdBy, theme: $theme, author: $author, text: $text, videoUrl: $videoUrl, id: $id}){\r\n    errors{\r\n      field\r\n      messages\r\n    }\r\n  }\r\n}`\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\n\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 7.5 + ITEM_PADDING_TOP,\r\n            // width: \"250vw\",\r\n        },\r\n    },\r\n};\r\n\r\n\r\nconst AutocompliteForNotUpdate = (data: any, autocompliteSelectHandleChange: (e: any, values: any) => any) => {\r\n    if (data){\r\n        return(\r\n            <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                fullWidth\r\n                options={data.me.questionSet}\r\n                getOptionLabel={(option: any) => option.text}\r\n                renderInput={(params) => <TextField {...params} label=\"Вопрос\" variant=\"outlined\"/>}\r\n                onChange={(e: any, values: any) => {\r\n                    autocompliteSelectHandleChange(e, values)\r\n                }}\r\n            />\r\n\r\n        )\r\n    }else{\r\n        return(<Spinner animation=\"border\" variant=\"success\" className=\" offset-6 mt-5\"/>)\r\n    }\r\n    }\r\n\r\nexport default function UpdateQuestion() {\r\n    const {data, error, loading, refetch} = useQuery(CONTEXT_DATA,{\r\n        onCompleted: (data) => {\r\n            if(questionId){\r\n                updateQuestionFromMutationData()\r\n            }\r\n        },\r\n    });\r\n\r\n    const autocompliteSelectHandleChange =  (e: any, values: any) => {\r\n        refetch()\r\n        data.me.questionSet.map((question: any, index: any) => {\r\n            if (question.id === values.id) {\r\n                changeQuestionIndex(index)\r\n                // console.log(index)\r\n            }\r\n        })\r\n\r\n        // console.log(values)\r\n        changeSelectedQuestion(values)\r\n        const authorsIdArray: any = []\r\n        values.author.map((author: any) => {\r\n            authorsIdArray.push(author.id)\r\n        })\r\n        changeAuthorId(authorsIdArray)\r\n        const themesIdArray: any = []\r\n        values.theme.map((theme: any) => {\r\n            themesIdArray.push(theme.id)\r\n        })\r\n        changeThemesId(themesIdArray)\r\n        changeQuestionId(values.id)\r\n        changeQuestionText(values.text)\r\n        changeQuestionUrl(values.videoUrl)\r\n        changeAnswersArray(values.answers)\r\n    }\r\n\r\n\r\n\r\n    const [questionText, changeQuestionText] = useState('');\r\n    const [questionUrl, changeQuestionUrl] = useState('');\r\n    const [ThemesId, changeThemesId] = useState([]);\r\n    const [authorId, changeAuthorId]: any = useState([]);\r\n    const [selectedQuestion, changeSelectedQuestion]: any = useState();\r\n    const [questionId, changeQuestionId]: any = useState()\r\n    const [answersArray, changeAnswersArray]: any = useState([])\r\n    const [questionIndex, changeQuestionIndex]: any = useState()\r\n    const [openQuestionUpdateNotification, changeOpenQuestionUpdateNotification] = useState(false)\r\n    const memedAutocomplite = useMemo(() => AutocompliteForNotUpdate(data, autocompliteSelectHandleChange), [data])\r\n\r\n    const [create_answer, {data: create_answer_data, loading: create_answer_loading}] = useMutation(CREATE_NEW_ANSWER, {\r\n        variables: {\r\n            question: questionId\r\n        },\r\n        onCompleted: (create_answer_data) => {\r\n            if (create_answer_data.createAnswer.errors.length === 0) {\r\n                 refetch()\r\n\r\n            }\r\n        }\r\n\r\n    })\r\n    const [update_question, {data: update_question_data, loading: update_question_loading}] = useMutation(UPDATE_QUESTION, {\r\n        variables: {\r\n            createdBy: 0,\r\n            theme: ThemesId,\r\n            author: authorId,\r\n            text: questionText,\r\n            videoUrl: questionUrl,\r\n            id: questionId\r\n        },\r\n        onCompleted: (update_question_data) =>{\r\n            if (update_question_data.updateQuestion.errors.length === 0){\r\n                refetch()\r\n                changeOpenQuestionUpdateNotification(true)\r\n            }\r\n        }\r\n    })\r\n\r\n    const updateQuestionNotificationHandleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            changeOpenQuestionUpdateNotification(false)\r\n        }\r\n    }\r\n\r\n    const updateQuestionFromMutationData = async () => {\r\n        let values: any = 0\r\n        data.me.questionSet.map((question: any, index: any) =>{\r\n            if (question.id === questionId){\r\n                values = question\r\n                changeQuestionIndex(index)\r\n            }\r\n        })\r\n        // console.log(values)\r\n        const authorsIdArray: any = []\r\n        values.author.map((author: any) => {\r\n            authorsIdArray.push(author.id)\r\n        })\r\n        changeAuthorId(authorsIdArray)\r\n        const themesIdArray: any = []\r\n        values.theme.map((theme: any) => {\r\n            themesIdArray.push(theme.id)\r\n        })\r\n        changeThemesId(themesIdArray)\r\n        // console.log(values)\r\n        changeQuestionText(values.text)\r\n        changeQuestionUrl(values.videoUrl)\r\n        changeAnswersArray(values.answers)\r\n\r\n    }\r\n\r\n\r\n\r\n    if (!data) {\r\n        return (<Spinner animation=\"border\" variant=\"success\" className=\" offset-6 mt-5\"/>)\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"display-4 text-center mt-4\" style={{fontSize: '33px'}}>Редактировать вопрос</div>\r\n            <div className=\"col-8 offset-2 mt-3 \">\r\n                {/* Нужно кэшировать!!!*/}\r\n                {/*<Autocomplete*/}\r\n                {/*    id=\"combo-box-demo\"*/}\r\n                {/*    fullWidth*/}\r\n                {/*    options={data.me.questionSet}*/}\r\n                {/*    getOptionLabel={(option: any) => option.text}*/}\r\n                {/*    renderInput={(params) => <TextField {...params} label=\"Вопрос\" variant=\"outlined\"/>}*/}\r\n                {/*    onChange={(e: any, values: any) => {*/}\r\n                {/*        autocompliteSelectHandleChange(e, values)*/}\r\n                {/*    }}*/}\r\n                {/*/>*/}\r\n                {memedAutocomplite}\r\n            </div>\r\n            <Row className=\"mt-3\">\r\n                <Col className=\"col-md-6 col-11  ml-5\">\r\n                    <div>\r\n                        <TextField\r\n                            id=\"standard-multiline-flexible\"\r\n                            label=\"Текст вопроса\"\r\n                            multiline\r\n                            fullWidth\r\n                            rowsMax={4}\r\n                            // style={{width: \"50vw\"}}\r\n                            value={questionText}\r\n                            onChange={(e) => {\r\n                                changeQuestionText(e.target.value)\r\n                            }}\r\n                        />\r\n                        <FormControl className=\"col-12\">\r\n                            <TextField\r\n                                id=\"standard-basic\"\r\n                                label=\"Ссылка на видео-вопрос\"\r\n                                value={questionUrl}\r\n                                onChange={(e) => {\r\n                                    changeQuestionUrl(e.target.value)\r\n                                }}/>\r\n                        </FormControl>\r\n                    </div>\r\n                </Col>\r\n                <Col className=\"col-md-4  col-10 offset-md-1\">\r\n                    <div>\r\n                        {/*{console.log(data)}*/}\r\n                        <FormControl className=\"col-12 ml-5\">\r\n                            <InputLabel id=\"question-theme-multiple\">Темы вопросов</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-mutiple-name-label\"\r\n                                id=\"demo-mutiple-name\"\r\n                                multiple\r\n                                value={ThemesId}\r\n                                onChange={(e: any) => {\r\n                                    changeThemesId(e.target.value)\r\n                                }}\r\n                                input={<Input/>}\r\n                                MenuProps={MenuProps}\r\n                            >\r\n                                {selectedQuestion ? data.questionThemes.map((theme: any) => (\r\n                                    <MenuItem key={theme.name + theme.id} value={theme.id}>\r\n                                        {theme.name}\r\n                                    </MenuItem>\r\n                                )) : null}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className='col-12 ml-5'>\r\n                            <InputLabel id=\"question-author-multiple\">Авторы вопросов</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-mutiple-name-label\"\r\n                                id=\"demo-mutiple-name\"\r\n                                multiple\r\n                                value={authorId}\r\n                                onChange={(e: any) => {\r\n                                    changeAuthorId(e.target.value)\r\n                                }}\r\n                                input={<Input/>}\r\n                                MenuProps={MenuProps}\r\n                            >\r\n                                {selectedQuestion ? data.me.questionauthorSet.map((author: any) => (\r\n                                    <MenuItem key={author.name + author.id} value={author.id}>\r\n                                        {author.name}\r\n                                    </MenuItem>\r\n                                )) : null}\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                        {/*<Row className=\"ml-1\">*/}\r\n                        {/*    <Button variant=\"outlined\" color=\"primary\" className=\"mt-2   justify-content-end ml-5\"*/}\r\n                        {/*            onClick={(event) =>{*/}\r\n                        {/*                event.preventDefault();*/}\r\n                        {/*                createQuestion()*/}\r\n                        {/*                changeOneTimeChecked(true)*/}\r\n                        {/*            }}>*/}\r\n                        {/*        Создать вопрос*/}\r\n                        {/*    </Button>*/}\r\n                        {/*    {mutation_data? createQuestionFunction(): null}*/}\r\n                        {/*</Row>*/}\r\n\r\n                        {/*{console.log(mutation_data)}*/}\r\n                        {/*{console.log(mutation_error)}*/}\r\n\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-2\">\r\n                <Col className=\"col-1  ml-5\">\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() =>{update_question()}}>\r\n                        Сохранить\r\n                    </Button>\r\n                </Col>\r\n                {update_question_loading? <Col className=\"col-1\">\r\n                    <Spinner animation=\"border\" variant=\"success\"/>\r\n                </Col> : null }\r\n                {update_question_data? update_question_data.updateQuestion.errors.length !== 0?\r\n                    <Alert severity=\"error\">Ошибка в одном или нескольких полях</Alert>: null : null}\r\n\r\n            </Row>\r\n            <div className=\"display-4 text-center mt-3 col-12\" style={{fontSize: '33px'}}>Редактировать ответы</div>\r\n            {/* Нужно кэшировать!!!*/}\r\n            {questionIndex? data.me.questionSet[questionIndex].answers.map((answer: any, answerIndex: number) =>\r\n                <AnswerNode className=\"mt-4\" key={answer.id} answer={answer} answerIndex={answerIndex} questionID={questionId}/>): null}\r\n            {selectedQuestion?\r\n                <Container>\r\n                    <Button variant=\"outlined\" color=\"primary\" className=\"col-12 mt-3 justify-content-center\"\r\n                            size=\"large\"  onClick={() => create_answer()}>\r\n                        Создать новый ответ\r\n                    </Button>\r\n                </Container>\r\n                : null }\r\n            {create_answer_loading? <Spinner animation=\"border\" variant=\"success\" className=\" offset-6 mt-5\"/>: null}\r\n            <Snackbar open={openQuestionUpdateNotification} autoHideDuration={6000} onClose={updateQuestionNotificationHandleClose}>\r\n                <Alert onClose={updateQuestionNotificationHandleClose} severity=\"success\">\r\n                    Содержание вопроса обновлено\r\n                </Alert>\r\n            </Snackbar>\r\n            {/*{console.log(create_answer_data)}*/}\r\n            <br/>\r\n            <br/>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\AnswerNode.tsx",["110","111","112","113","114","115","116","117","118","119"],"import React, {useMemo, useState} from \"react\";\r\nimport {Col, Row} from \"react-bootstrap\";\r\nimport {Collapse, Fade, InputLabel, Select, Snackbar, Switch, TextField} from \"@material-ui/core\";\r\nimport {any, number} from \"prop-types\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport { MenuItem } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {gql, useMutation} from \"@apollo/client\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {assertDirective} from \"graphql\";\r\n\r\nconst UPDATE_ANSWER = gql`mutation UPDATE_ANSWER($question: ID!, $id: ID, $isTrue: Boolean, $text: String, $helpTextv1: String,\r\n$helpTextv2: String, $helpTextv3: String, $videoUrl: String, $checkQueue: Int!, $hardLevelOfAnswer: String!){\r\n  updateAnswer(input: {createdBy: 0, question: $question, isTrue: $isTrue, text: $text, helpTextv1: $helpTextv1, \r\n  helpTextv2: $helpTextv2, helpTextv3: $helpTextv3, videoUrl: $videoUrl, checkQueue: $checkQueue, \r\n    hardLevelOfAnswer: $hardLevelOfAnswer, id: $id}){\r\n    errors{\r\n      field\r\n      messages\r\n    }\r\n  }\r\n}`\r\n\r\nexport default function AnswerNode(props: any) {\r\n    const [text, changeText] = useState(props.answer.text)\r\n    const [helpTextv1, changeHelpTextv1] = useState(props.answer.helpTextv1)\r\n    const [helpTextv2, changeHelpTextv2] = useState(props.answer.helpTextv2)\r\n    const [helpTextv3, changeHelpTextv3] = useState(props.answer.helpTextv3)\r\n    const [videoUrl, changeVideoUrl] = useState(props.answer.videoUrl)\r\n    const [hardLevelOfAnswer, changeHardLevelOfAnswer] = useState(props.answer.hardLevelOfAnswer)\r\n    const [isTrue, changeIsTrue] = useState(props.answer.isTrue)\r\n    const [checkQueue, changeCheckQueue] = useState(props.answer.checkQueue)\r\n    const [showPaper, changeShowPaper] = useState(false)\r\n    const[ showUpdateNotification, changeShowUpdateNotification] = useState(false)\r\n    const [update_answer, {data: update_answer_data, loading: update_answer_loading}] = useMutation(UPDATE_ANSWER, {\r\n        variables: {\r\n            question: props.questionID,\r\n            id: props.answer.id,\r\n            isTrue: (isTrue == 'true'), // isTrue - строковая, потому что селект возвращает только строки\r\n            text: text,\r\n            helpTextv1: helpTextv1,\r\n            helpTextv2: helpTextv2,\r\n            helpTextv3: helpTextv3,\r\n            videoUrl: videoUrl,\r\n            checkQueue: checkQueue,\r\n            hardLevelOfAnswer: hardLevelOfAnswer,\r\n        },\r\n        onCompleted: (update_answer_data) =>{\r\n            if (update_answer_data.updateAnswer.errors.length === 0){\r\n                console.log(\"saved\")\r\n                changeShowUpdateNotification(true)\r\n            }\r\n        }\r\n    })\r\n    const changeTextHandle = (e: any) => {\r\n        changeText(e.target.value)\r\n    }\r\n    const updateAnswerNotificationHandleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            changeShowUpdateNotification(false)\r\n        }\r\n    }\r\n    console.log(update_answer_data)\r\n    return (\r\n        <div className=\"mr-2 ml-2 mt-3 \">\r\n            <Paper elevation={3} className=\"ml-5 mr-5\">\r\n                <br/>\r\n                <Typography className=\"ml-5\" color=\"textSecondary\">{\"ID: \" + props.answer.id + \" \" + text}</Typography>\r\n                 <FormControlLabel\r\n                     control={<Switch checked={showPaper} onChange={() => changeShowPaper(!showPaper)} />}\r\n                     label=\"Редактировать\"\r\n                     className=\"ml-5\"\r\n                 />\r\n                <Collapse in={showPaper}>\r\n                    <div>\r\n                        <Row >\r\n                            <Col className=\"mr-5 ml-5 col-5 \" >\r\n                                <TextField\r\n                                    className=\"mt-2\"\r\n                                    key={props.answer.id + \"text\"}\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Текст вопроса\"\r\n                                    multiline\r\n                                    fullWidth\r\n                                    rowsMax={7}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={text}\r\n                                    onChange={changeTextHandle}\r\n                                />\r\n                                <TextField\r\n                                    className=\"mt-2\"\r\n                                    key={props.answer.id + \"helpTextv1\"}\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Подсказка для легкого уровня сложности\"\r\n                                    multiline\r\n                                    fullWidth\r\n                                    rowsMax={7}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={helpTextv1}\r\n                                    onChange={(e: any) => {\r\n                                        changeHelpTextv1(e.target.value)\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                            <Col className=\"col-5 offset-1\">\r\n                                <TextField\r\n                                    className=\"mt-2\"\r\n                                    key={props.answer.id + \"helpTextv2\"}\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Подсказка для стандартного уровня сложности\"\r\n                                    multiline\r\n                                    fullWidth\r\n                                    rowsMax={7}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={helpTextv2}\r\n                                    onChange={(e: any) => {\r\n                                        changeHelpTextv2(e.target.value)\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    className=\"mt-2\"\r\n                                    key={props.answer.id + \"helpTextv3\"}\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Подсказка для усложненного уровня\"\r\n                                    multiline\r\n                                    fullWidth\r\n                                    rowsMax={7}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={helpTextv3}\r\n                                    onChange={(e: any) => {\r\n                                        changeHelpTextv3(e.target.value)\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Col className=\"mr-5 ml-5 col-5 mt-2\">\r\n                                <TextField\r\n                                    key={props.answer.id + \"videoUrl\"}\r\n                                    id=\"standard-multiline-flexible\"\r\n                                    label=\"Ссылка на видео-ответ\"\r\n                                    fullWidth\r\n                                    rowsMax={7}\r\n                                    // style={{width: \"50vw\"}}\r\n                                    value={videoUrl}\r\n                                    onChange={(e: any) => {\r\n                                        changeVideoUrl(e.target.value)\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                            <Col className=\"col-1 offset-1 mt-2\">\r\n                                <FormControl style={{width: \"220px\"}}>\r\n                                    <InputLabel id=\"demo-simple-select-label\">Сложность ответа</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-label\"\r\n                                        id=\"demo-simple-select\"\r\n                                        value={hardLevelOfAnswer}\r\n                                        onChange={(e) =>{changeHardLevelOfAnswer(e.target.value)}}\r\n                                    >\r\n                                        <MenuItem value=\"EASY\">Очевидный</MenuItem>\r\n                                        <MenuItem value=\"MEDIUM\">Нормальный</MenuItem>\r\n                                        <MenuItem value=\"HARD\">Каверзный</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Col>\r\n                            <Col className=\"col-1 offset-1 mt-2\">\r\n                                <FormControl style={{width: \"220px\"}}>\r\n                                    <InputLabel id=\"demo-simple-select-label\">Ответ верный/неверный</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-label\"\r\n                                        id=\"demo-simple-select\"\r\n                                        value={isTrue}\r\n                                        onChange={(e) =>{changeIsTrue(e.target.value)}}\r\n                                    >\r\n                                        <MenuItem value=\"true\">Верный</MenuItem>\r\n                                        <MenuItem value=\"false\">Неверный</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Col>\r\n                            <Col className=\"col-1 offset-1 ml-auto mr-5 mt-3\">\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => {update_answer()}}>\r\n                                    Сохранить\r\n                                </Button>\r\n                            </Col>\r\n                            {update_answer_data? update_answer_data.updateAnswer.errors.length !== 0?\r\n                                <Alert severity='error'>Ошибка при сохранение ответа</Alert>: null :null}\r\n                        </Row>\r\n                    </div>\r\n                </Collapse>\r\n                <Snackbar open={showUpdateNotification} autoHideDuration={6000} onClose={updateAnswerNotificationHandleClose}>\r\n                    <Alert onClose={updateAnswerNotificationHandleClose} severity=\"success\">\r\n                        Содержание ответа обновлено\r\n                    </Alert>\r\n                </Snackbar>\r\n                <br/>\r\n                <br/>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Editor\\MainEditor.tsx",["120","121","122"],"import React, {useMemo, useState} from \"react\";\r\nimport {BottomNavigation} from \"@material-ui/core\";\r\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\r\nimport {AddIcon} from \"@material-ui/data-grid\";\r\nimport {ViewList} from \"@material-ui/icons\";\r\nimport CreatePoint from \"./CreatePoint\";\r\nimport UpdateQuestion from \"./UpdateQuestion\";\r\n\r\nexport default function MainEditor(){\r\n    const [value, setValue] = React.useState(0);\r\n\r\n\r\n    return (\r\n        <div>\r\n        <BottomNavigation\r\n            value={value}\r\n            onChange={(event, newValue) => {\r\n                setValue(newValue);\r\n            }}\r\n            showLabels\r\n            className=\"col-12\"\r\n        >\r\n            <BottomNavigationAction label=\"Создание вопроса\" icon={ <AddIcon />} />\r\n            <BottomNavigationAction label=\"Редактор вопроса\" icon={<ViewList />} />\r\n        </BottomNavigation>\r\n        {value === 0 ? <CreatePoint/>: <UpdateQuestion/>}\r\n        </div>\r\n    );\r\n}","C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\TakeTheTest.tsx",["123","124"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\Menu\\MainMenu.tsx",["125","126","127","128"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\UserTest\\MainUserTest.tsx",["129","130","131","132","133","134","135","136","137","138"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\CreateUserTest.jsx",["139","140","141","142","143","144","145","146"],"C:\\Users\\Heightline\\WebstormProjects\\iot\\src\\Components\\OLD_NOT_USED\\ShowErrorsOnScreen.jsx",["147","148","149"],{"ruleId":"150","severity":1,"message":"151","line":8,"column":39,"nodeType":"152","messageId":"153","endLine":8,"endColumn":42},{"ruleId":"150","severity":1,"message":"154","line":25,"column":8,"nodeType":"152","messageId":"153","endLine":25,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":51,"column":1,"nodeType":"157","messageId":"158","endLine":51,"endColumn":15},{"ruleId":"150","severity":1,"message":"159","line":65,"column":34,"nodeType":"152","messageId":"153","endLine":65,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":1,"column":25,"nodeType":"160","messageId":"158","endLine":1,"endColumn":39},{"ruleId":"155","severity":1,"message":"161","line":1,"column":25,"nodeType":"152","messageId":"162","endLine":1,"endColumn":36},{"ruleId":"150","severity":1,"message":"163","line":7,"column":14,"nodeType":"152","messageId":"153","endLine":7,"endColumn":25},{"ruleId":"150","severity":1,"message":"164","line":8,"column":9,"nodeType":"152","messageId":"153","endLine":8,"endColumn":18},{"ruleId":"150","severity":1,"message":"165","line":10,"column":7,"nodeType":"152","messageId":"153","endLine":10,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":22,"column":16,"nodeType":"157","messageId":"158","endLine":22,"endColumn":34},{"ruleId":"155","severity":1,"message":"156","line":7,"column":16,"nodeType":"157","messageId":"158","endLine":7,"endColumn":36},{"ruleId":"150","severity":1,"message":"166","line":5,"column":9,"nodeType":"152","messageId":"153","endLine":5,"endColumn":13},{"ruleId":"150","severity":1,"message":"167","line":7,"column":14,"nodeType":"152","messageId":"153","endLine":7,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":27,"column":16,"nodeType":"157","messageId":"158","endLine":27,"endColumn":32},{"ruleId":"150","severity":1,"message":"159","line":31,"column":27,"nodeType":"152","messageId":"153","endLine":31,"endColumn":32},{"ruleId":"155","severity":1,"message":"156","line":6,"column":16,"nodeType":"157","messageId":"158","endLine":6,"endColumn":34},{"ruleId":"155","severity":1,"message":"156","line":16,"column":16,"nodeType":"157","messageId":"158","endLine":16,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":212,"column":16,"nodeType":"157","messageId":"158","endLine":212,"endColumn":38},{"ruleId":"150","severity":1,"message":"159","line":214,"column":18,"nodeType":"152","messageId":"153","endLine":214,"endColumn":23},{"ruleId":"150","severity":1,"message":"168","line":214,"column":25,"nodeType":"152","messageId":"153","endLine":214,"endColumn":32},{"ruleId":"150","severity":1,"message":"169","line":221,"column":12,"nodeType":"152","messageId":"153","endLine":221,"endColumn":41},{"ruleId":"150","severity":1,"message":"170","line":261,"column":62,"nodeType":"152","messageId":"153","endLine":261,"endColumn":83},{"ruleId":"150","severity":1,"message":"171","line":332,"column":11,"nodeType":"152","messageId":"153","endLine":332,"endColumn":35},{"ruleId":"150","severity":1,"message":"172","line":335,"column":11,"nodeType":"152","messageId":"153","endLine":335,"endColumn":42},{"ruleId":"155","severity":1,"message":"156","line":104,"column":16,"nodeType":"157","messageId":"158","endLine":104,"endColumn":41},{"ruleId":"150","severity":1,"message":"159","line":105,"column":18,"nodeType":"152","messageId":"153","endLine":105,"endColumn":23},{"ruleId":"150","severity":1,"message":"168","line":105,"column":25,"nodeType":"152","messageId":"153","endLine":105,"endColumn":32},{"ruleId":"150","severity":1,"message":"173","line":106,"column":23,"nodeType":"152","messageId":"153","endLine":106,"endColumn":27},{"ruleId":"150","severity":1,"message":"174","line":148,"column":12,"nodeType":"152","messageId":"153","endLine":148,"endColumn":24},{"ruleId":"150","severity":1,"message":"175","line":153,"column":34,"nodeType":"152","messageId":"153","endLine":153,"endColumn":52},{"ruleId":"150","severity":1,"message":"176","line":1,"column":16,"nodeType":"152","messageId":"153","endLine":1,"endColumn":23},{"ruleId":"150","severity":1,"message":"177","line":3,"column":19,"nodeType":"152","messageId":"153","endLine":3,"endColumn":23},{"ruleId":"150","severity":1,"message":"178","line":4,"column":9,"nodeType":"152","messageId":"153","endLine":4,"endColumn":12},{"ruleId":"150","severity":1,"message":"179","line":4,"column":14,"nodeType":"152","messageId":"153","endLine":4,"endColumn":20},{"ruleId":"150","severity":1,"message":"180","line":8,"column":8,"nodeType":"152","messageId":"153","endLine":8,"endColumn":15},{"ruleId":"150","severity":1,"message":"181","line":14,"column":9,"nodeType":"152","messageId":"153","endLine":14,"endColumn":24},{"ruleId":"155","severity":1,"message":"156","line":28,"column":16,"nodeType":"157","messageId":"158","endLine":28,"endColumn":47},{"ruleId":"155","severity":1,"message":"182","line":28,"column":36,"nodeType":"152","messageId":"183","endLine":28,"endColumn":46},{"ruleId":"150","severity":1,"message":"184","line":36,"column":24,"nodeType":"152","messageId":"153","endLine":36,"endColumn":40},{"ruleId":"150","severity":1,"message":"185","line":39,"column":63,"nodeType":"152","messageId":"153","endLine":39,"endColumn":84},{"ruleId":"150","severity":1,"message":"176","line":1,"column":16,"nodeType":"152","messageId":"153","endLine":1,"endColumn":23},{"ruleId":"150","severity":1,"message":"186","line":1,"column":25,"nodeType":"152","messageId":"153","endLine":1,"endColumn":33},{"ruleId":"155","severity":1,"message":"156","line":9,"column":16,"nodeType":"157","messageId":"158","endLine":9,"endColumn":37},{"ruleId":"150","severity":1,"message":"187","line":9,"column":9,"nodeType":"152","messageId":"153","endLine":9,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":58,"column":8,"nodeType":"157","messageId":"158","endLine":58,"endColumn":30},{"ruleId":"150","severity":1,"message":"188","line":3,"column":8,"nodeType":"152","messageId":"153","endLine":3,"endColumn":12},{"ruleId":"150","severity":1,"message":"151","line":6,"column":10,"nodeType":"152","messageId":"153","endLine":6,"endColumn":13},{"ruleId":"150","severity":1,"message":"167","line":6,"column":15,"nodeType":"152","messageId":"153","endLine":6,"endColumn":23},{"ruleId":"155","severity":1,"message":"156","line":17,"column":5,"nodeType":"189","messageId":"158","endLine":17,"endColumn":13},{"ruleId":"150","severity":1,"message":"190","line":11,"column":8,"nodeType":"152","messageId":"153","endLine":11,"endColumn":17},{"ruleId":"150","severity":1,"message":"178","line":17,"column":9,"nodeType":"152","messageId":"153","endLine":17,"endColumn":12},{"ruleId":"155","severity":1,"message":"156","line":65,"column":16,"nodeType":"157","messageId":"158","endLine":65,"endColumn":40},{"ruleId":"150","severity":1,"message":"159","line":66,"column":19,"nodeType":"152","messageId":"153","endLine":66,"endColumn":24},{"ruleId":"150","severity":1,"message":"168","line":66,"column":26,"nodeType":"152","messageId":"153","endLine":66,"endColumn":33},{"ruleId":"150","severity":1,"message":"191","line":66,"column":35,"nodeType":"152","messageId":"153","endLine":66,"endColumn":42},{"ruleId":"150","severity":1,"message":"192","line":70,"column":47,"nodeType":"152","messageId":"153","endLine":70,"endColumn":67},{"ruleId":"150","severity":1,"message":"193","line":70,"column":76,"nodeType":"152","messageId":"153","endLine":70,"endColumn":94},{"ruleId":"150","severity":1,"message":"194","line":71,"column":18,"nodeType":"152","messageId":"153","endLine":71,"endColumn":38},{"ruleId":"150","severity":1,"message":"195","line":252,"column":51,"nodeType":"152","messageId":"153","endLine":252,"endColumn":52},{"ruleId":"155","severity":1,"message":"196","line":7,"column":17,"nodeType":"152","messageId":"162","endLine":7,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":24,"column":5,"nodeType":"189","messageId":"158","endLine":24,"endColumn":24},{"ruleId":"155","severity":1,"message":"156","line":37,"column":5,"nodeType":"189","messageId":"158","endLine":37,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":46,"column":5,"nodeType":"189","messageId":"158","endLine":46,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":59,"column":5,"nodeType":"189","messageId":"158","endLine":59,"endColumn":18},{"ruleId":"155","severity":1,"message":"156","line":84,"column":5,"nodeType":"189","messageId":"158","endLine":84,"endColumn":26},{"ruleId":"155","severity":1,"message":"197","line":84,"column":15,"nodeType":"152","messageId":"162","endLine":84,"endColumn":25},{"ruleId":"155","severity":1,"message":"156","line":100,"column":5,"nodeType":"189","messageId":"158","endLine":100,"endColumn":13},{"ruleId":"150","severity":1,"message":"166","line":4,"column":35,"nodeType":"152","messageId":"153","endLine":4,"endColumn":39},{"ruleId":"155","severity":1,"message":"196","line":7,"column":17,"nodeType":"152","messageId":"162","endLine":7,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":10,"column":5,"nodeType":"189","messageId":"158","endLine":10,"endColumn":13},"@typescript-eslint/no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","'CreatePoint' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","'error' is assigned a value but never used.","ArrowFunctionExpression","Argument 'onPerfEntry' should be typed.","missingArgType","'useMutation' is defined but never used.","'useEffect' is defined but never used.","'VERIFY_LOGIN' is assigned a value but never used.","'Card' is defined but never used.","'useQuery' is defined but never used.","'loading' is assigned a value but never used.","'selectedRowInQuestionDataGrid' is assigned a value but never used.","'update_author_loading' is assigned a value but never used.","'newThemeNameHandleChange' is assigned a value but never used.","'newThemeDescriptionHandleChange' is assigned a value but never used.","'data' is defined but never used.","'answersArray' is assigned a value but never used.","'create_answer_data' is assigned a value but never used.","'useMemo' is defined but never used.","'Fade' is defined but never used.","'any' is defined but never used.","'number' is defined but never used.","'Divider' is defined but never used.","'assertDirective' is defined but never used.","Argument 'props' should be typed with a non-any type.","anyTypedArg","'changeCheckQueue' is assigned a value but never used.","'update_answer_loading' is assigned a value but never used.","'useState' is defined but never used.","'Typography' is defined but never used.","'logo' is defined but never used.","FunctionExpression","'TableHead' is defined but never used.","'refetch' is assigned a value but never used.","'get_question_loading' is assigned a value but never used.","'get_question_error' is assigned a value but never used.","'refetch_get_question' is assigned a value but never used.","'e' is defined but never used.","Argument 'props' should be typed.","Argument 'questionId' should be typed."]